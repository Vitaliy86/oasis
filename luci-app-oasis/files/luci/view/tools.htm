<%+header%>

<style>
  #oasis-tool-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: sans-serif;
  }

  h2, h3 {
    margin: 0;
    padding: 5px 0;
  }

  .server-block {
    width: 400px;
    margin-top: 30px;
  }

  .list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
    margin-top: 10px;
  }

  .cell {
    background-color: #eee;
    border: 1px solid #666;
    border-radius: 10px;
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .cell-title {
    color: #666;
    font-weight: bold;
    font-size: 1.2em;
    margin-bottom: 5px;
  }

  .cell-description {
    flex: 1;
    font-size: 0.9em;
    margin-bottom: 10px;
    color: #444;
  }

  .cell-footer {
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .toggle-button {
    padding: 5px 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9em;
    transition: background-color 0.2s;
  }

  .toggle-button.enabled {
    background-color: #4CAF50;
    color: white;
  }

  .toggle-button.disabled {
    background-color: #888;
    color: #fff;
  }
</style>

<h2>Local Tools</h2>
<div id="oasis-tool-container"></div>

<!--
<h2>Remote MCP Server</h2>
<div id="oasis-mcp-containe"></div>
-->

<script>
(function() {
  const container = document.getElementById('oasis-tool-container');

  function createServerBlock(serverName, tools) {
    const block = document.createElement('div');
    block.className = 'server-block';

    const header = document.createElement('h3');
    header.textContent = serverName;
    block.appendChild(header);

    const list = document.createElement('div');
    list.className = 'list';

    tools.forEach(tool => {
      list.appendChild(createCard(tool));
    });

    block.appendChild(list);
    return block;
  }

  function createCard(tool) {
    const cell = document.createElement('div');
    cell.className = 'cell';

    const title = document.createElement('div');
    title.className = 'cell-title';
    title.textContent = tool.name || 'Unknown';

    const desc = document.createElement('div');
    desc.className = 'cell-description';
    desc.textContent = tool.description || 'No description.';

    const footer = document.createElement('div');
    footer.className = 'cell-footer';

    const btn = document.createElement('button');
    btn.className = 'toggle-button';

    let isEnabled = tool.enable === '1';
    btn.textContent = isEnabled ? 'Enable' : 'Disable';
    btn.classList.add(isEnabled ? 'enabled' : 'disabled');

    btn.addEventListener('click', () => {
      isEnabled = !isEnabled;
      btn.textContent = isEnabled ? 'Enable' : 'Disable';
      btn.classList.toggle('enabled', isEnabled);
      btn.classList.toggle('disabled', !isEnabled);
    });

    footer.appendChild(btn);
    cell.appendChild(title);
    cell.appendChild(desc);
    cell.appendChild(footer);

    return cell;
  }

  function loadTools() {
    fetch('<%=build_url("admin", "network", "oasis", "load-server-info")%>')
      .then(response => response.json())
      .then(data => {
        const tools = data.tools || {};
        const serverMap = {};

        Object.values(tools).forEach(tool => {
          if (tool[".type"] === "tool" && tool.type === "function") {
            const server = tool.server || 'Unknown Server';
            if (!serverMap[server]) serverMap[server] = [];
            serverMap[server].push(tool);
          }
        });

        Object.entries(serverMap).forEach(([server, serverTools]) => {
          const block = createServerBlock(server, serverTools);
          container.appendChild(block);
        });
      })
      .catch(err => {
        console.error('Failed to load server info:', err);
      });
  }

  loadTools();
})();
</script>

<%+footer%>
