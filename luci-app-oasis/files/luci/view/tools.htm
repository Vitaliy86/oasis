<%+header%>

<style>
  /* Layout */
  #oasis-tool-container { display: flex; flex-direction: column; align-items: center; }
  h2 { margin: 0 0 8px; }
  h3 { margin: 0; font-size: 1rem; color: #555; }
  .server-block { width: 100%; max-width: 760px; margin-top: 22px; }
  .server-header { display:flex; align-items:center; justify-content: space-between; margin-bottom: 8px; }
  .list { display:flex; flex-direction:column; gap: 12px; width:100%; margin-top: 8px; }

  /* Card */
  .cell { background:#fff; border-radius:12px; box-shadow: 0 4px 10px rgba(0,0,0,0.06); padding: 14px 16px; display:flex; flex-direction:column; gap:10px; }
  .cell-title { color:#333; font-weight:700; font-size: 1.05rem; display:flex; align-items:center; gap:8px; }
  .status-pill { font-size: 12px; padding: 2px 8px; border-radius: 999px; background:#e9ecef; color:#495057; }
  .status-pill.enabled { background:#d1e7dd; color:#0f5132; }
  .pill-conflict { font-size: 12px; padding: 2px 8px; border-radius: 999px; background:#ff4da6; color:#ffffff; }
  .pill-script { font-size: 12px; padding: 2px 8px; border-radius: 999px; color:#ffffff; }
  .pill-script.script-lua { background:#2a84ff; }
  .pill-script.script-ucode { background:#7b61ff; }
  .cell-description { font-size: 0.92rem; color:#444; line-height:1.45; }
  .cell-footer { display:flex; justify-content:flex-end; align-items:center; }

  /* Unified button styles */
  .add-button, .load-button, .update-button, .delete-button, .cancel-button {
    display: inline-block; padding: 0 14px; width: 7.5rem; height: 2.5rem; line-height: 2.5rem; color: #ffffff; border: none; border-radius: 10px; cursor: pointer; font-weight: 600;
  }
  .load-button { background: linear-gradient(180deg, #2a84ff 0%, #0d6efd 100%); }
  .delete-button, .cancel-button { background: linear-gradient(180deg, #9aa0a6 0%, #80868b 100%); }
  .load-button:active, .delete-button:active, .cancel-button:active { transform: translateY(1px); }

  /* Toast */
  .toast { position: sticky; top: 8px; background:#212529; color:#fff; padding:10px 12px; border-radius:8px; margin-bottom:8px; display:none; z-index: 10; }
  .toast.show { display:block; }
  .toast.success { background:#198754; }
  .toast.error { background:#dc3545; }
  .toast.info { background:#0d6efd; }
</style>

<div id="tools-toast" role="status" aria-live="polite" class="toast" aria-atomic="true"></div>
<h2>Local Tools</h2>
<div id="oasis-tool-container"></div>

<!--
<h2>Remote MCP Server</h2>
<div id="oasis-mcp-containe"></div>
-->

<script>
(function() {
  const container = document.getElementById('oasis-tool-container');
  const toastEl = document.getElementById('tools-toast');

  function showToast(message, type = 'info', timeout = 2000) {
    if (!toastEl) return;
    toastEl.textContent = message;
    toastEl.className = `toast show ${type}`;
    setTimeout(() => { toastEl.className = 'toast'; toastEl.textContent = ''; }, timeout);
  }

  function createServerBlock(serverName, tools) {
    const block = document.createElement('div');
    block.className = 'server-block';

    const headerWrap = document.createElement('div');
    headerWrap.className = 'server-header';
    const header = document.createElement('h3');
    header.textContent = serverName;
    headerWrap.appendChild(header);
    block.appendChild(headerWrap);

    const list = document.createElement('div');
    list.className = 'list';

    tools.forEach(tool => {
      list.appendChild(createCard(tool));
    });

    block.appendChild(list);
    return block;
  }

  function createCard(tool) {
    const cell = document.createElement('div');
    cell.className = 'cell';

    const title = document.createElement('div');
    title.className = 'cell-title';
    const titleText = document.createElement('span');
    titleText.textContent = tool.name || 'Unknown';
    const status = document.createElement('span');
    status.className = 'status-pill' + ((tool.enable === '1') ? ' enabled' : '');
    status.textContent = (tool.enable === '1') ? 'Enabled' : 'Disabled';
    title.appendChild(titleText);
    // script badge (lua -> blue, ucode -> purple)
    if (tool.script === 'lua' || tool.script === 'ucode') {
      const script = document.createElement('span');
      script.className = 'pill-script ' + (tool.script === 'lua' ? 'script-lua' : 'script-ucode');
      script.textContent = tool.script;
      title.appendChild(script);
    }
    // Show conflict badge when conflict === '1'
    const isConflict = (tool.conflict === '1');
    if (isConflict) {
      const conflict = document.createElement('span');
      conflict.className = 'pill-conflict';
      conflict.textContent = 'conflict';
      title.appendChild(conflict);
    }
    // enable/disable status at the end
    title.appendChild(status);

    const desc = document.createElement('div');
    desc.className = 'cell-description';
    desc.textContent = tool.description || 'No description.';

    const footer = document.createElement('div');
    footer.className = 'cell-footer';

    const btn = document.createElement('button');
    let isEnabled = tool.enable === '1';
    btn.className = isEnabled ? 'delete-button' : 'load-button';
    btn.textContent = isEnabled ? 'Disable' : 'Enable';
    if (isConflict) {
      btn.disabled = true;
      btn.title = 'Conflict: cannot change state';
    }

    btn.addEventListener('click', () => {
      isEnabled = !isEnabled;
      btn.textContent = isEnabled ? 'Disable' : 'Enable';
      btn.className = isEnabled ? 'delete-button' : 'load-button';
      status.textContent = isEnabled ? 'Enabled' : 'Disabled';
      status.className = 'status-pill' + (isEnabled ? ' enabled' : '');
      showToast(`"${tool.name}" is now ${isEnabled ? 'enabled' : 'disabled'}.`, isEnabled ? 'success' : 'info');
    });

    footer.appendChild(btn);
    cell.appendChild(title);
    cell.appendChild(desc);
    cell.appendChild(footer);

    return cell;
  }

  function loadTools() {
    fetch('<%=build_url("admin", "network", "oasis", "load-server-info")%>')
      .then(response => response.json())
      .then(data => {
        const tools = data.tools || {};
        const serverMap = {};

        Object.values(tools).forEach(tool => {
          if (tool[".type"] === "tool" && tool.type === "function") {
            const server = tool.server || 'Unknown Server';
            if (!serverMap[server]) serverMap[server] = [];
            serverMap[server].push(tool);
          }
        });

        Object.entries(serverMap).forEach(([server, serverTools]) => {
          const block = createServerBlock(server, serverTools);
          container.appendChild(block);
        });
      })
      .catch(err => {
        console.error('Failed to load server info:', err);
      });
  }

  loadTools();
})();
</script>

<%+footer%>
