<%+header%>

<link rel="stylesheet" type="text/css" href="<%= resource %>/luci-app-oasis/chat.css">

<div class="oasis-container">
    <div class="chat-list-container">
        <label for="import-chat-data" id="import-button" style="width:100%;">Import Chat Data +</label>
        <input type="file" id="import-chat-data" accept=".json" style="display: none;">
        <!--<button type="button" id="import-button">Import Chat Data</button>-->
        <ul id="chat-list"></ul>
    </div>

    <div class="chat-container">
        <ul class="smp-chat-hamburger-menu">
            <li id="menu-trigger">â˜°</li>
            <ul id="smp-chat-item-dropdown">
                <li>
                    <label for="smp-import-chat-data" id="smp-import-button" style="width: 100%;">Import Chat Data +</label>
                    <input type="file" id="smp-import-chat-data" accept=".json" style="display: none;">
                </li>
                <li id="smp-new-button-item">
                    <button id="smp-new-button">New Chat</button>
                </li>
            </ul>
        </ul>
        <div id="keyboard-padding"></div>
        <select id="ai-service-list"></select>
        <div class="chat-messages"></div>
        <div class="chat-input">
            <div class="chat-messages">
                <textarea id="message-input" placeholder="Your Message"></textarea>
                <select id="uci-config-list" name="uci-config-list">
                    <option value="---">---</option>
                </select>
            </div>
            <div class="chat-buttons">
                <button id="send-button">Send</button>
                <button id="new-button">New</button>
                <button id="smp-send-button" style="border: none; background: none; cursor: pointer;">
                    <span class="material-icons send-icon">send</span>
                </button>
            </div>
        </div>
    </div>

    <div class="oasis-dropdown" id="oasis-dropdown">
        <button class="oasis-menu-item" data-action="delete">Delete</button>
        <button class="oasis-menu-item" data-action="rename">Rename</button>
        <button class="oasis-menu-item" data-action="export">Export</button>
        <button class="oasis-menu-item" data-action="cancel">Cancel</button>
    </div>

    <div class="rename-popup-overlay" id="rename-popup-overlay"></div>
    <div class="rename-popup" id="rename-popup">
        <h3>Rename chat name</h3>
        <input type="text" id="rename-line-box" >
        <div class="rename-popup-buttons">
            <button id="rename">Rename</button>
            <button id="rename-cancel" onclick="closeRenamePopup()">Cancel</button>
        </div>
    </div>

    <div class="export-popup-overlay" id="export-popup-overlay"></div>
    <div class="export-popup" id="export-popup">
        <h3>Select Export Type</h3>
        <div class="export-popup-buttons">
            <button id="json-export">Raw(JSON)</button>
            <button id="text-export">Text</button>
            <button id="export-cancel" onclick="closeExportPopup()">Cancel</button>
        </div>
    </div>

    <div class="applying-popup" id="applying-popup">
        <h2 id="applying-popup-title"></h2>
        <div class="applying-progress">
            <div class="progress-bar" id="progressBar"></div>
        </div>
        <div id="reboot_announce" style="display: none; color: #00cc06">Executed reboot system!!</div>
        <!-- <button class="close-applying-popup" id="close-applying-popup">Reload</button> -->
    </div>

    <div class="confirm-popup" id="confirm-popup">
        <h2>Finalize this settings?</h2>
        <pre class="console-command-color" id="confirm-popup-pre"></pre>
        <div class="confirm-popup-buttons">
            <button id="finalize">Finalize</button>
            <button id="rollback">Rollback</button>
        </div>
    </div>

    <div class="sysmsg-list-popup" id="sysmsg-list-popup">
        <h2>Select AI System Message<h2>
        <div id="sysmsg-list-popup-buttons"></div>
    </div>
</div>

<script>

    const chatItems = null;
    let activeConversation = false;
    let targetChatItemId = null;
    let chatList = null;
    let icon_name = null;
    let sysmsg_list = null;
    let sysmsg_key = "";
    let targetChatId = "";
    let message_outputing = false;
    const resourcePath = '<%= resource %>';
    let ai_service_list = [];

    function loadPaperPlane() {
        const style = document.createElement('style');
        style.textContent = `
            @font-face {
                font-family: 'Material Icons';
                font-style: normal;
                font-weight: 400;
                src: url('${resourcePath}/luci-app-oasis/fonts/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2') format('woff2');
            }
            .material-icons {
                font-family: 'Material Icons';
                font-weight: normal;
                font-style: normal;
                font-size: 24px;
                line-height: 1;
                letter-spacing: normal;
                text-transform: none;
                display: inline-block;
                white-space: nowrap;
                word-wrap: normal;
                direction: ltr;
                -webkit-font-feature-settings: 'liga';
                -webkit-font-smoothing: antialiased;
            }
        `;
        document.head.appendChild(style);
    }

    /* chat data list for smartphone */
    document.getElementById("menu-trigger").addEventListener("click", function () {
        const dropdown = this.nextElementSibling;
        const isVisible = dropdown.style.display === "block";

        dropdown.style.display = isVisible ? "none" : "block";
    });

    function convertMarkdownToHTML(input) {
        let html = '';
        let isCodeBlock = false;
        let currentLanguage = '';
        const lines = input.split('\n');

        for (let line of lines) {

            const trimmedLine = line.trim()

            if (trimmedLine.startsWith('```')) {
                if (!isCodeBlock) {
                    currentLanguage = trimmedLine.slice(3).trim();
                    const languageClass = currentLanguage ? ` language-${escapeHTML(currentLanguage)}` : '';
                    html += `<pre class="console-command-color${languageClass}">`;
                    isCodeBlock = true;
                } else {
                    html += '</pre>';
                    isCodeBlock = false;
                }
            } else if (isCodeBlock) {
                html += escapeHTML(line) + '\n';
            } else {
                line = line.replace(/^###### (.+)$/gm, '<h6 style="color:#DCDCDC;">$1</h6>');
                line = line.replace(/^##### (.+)$/gm, '<h5 style="color:#708090;">$1</h5>');
                line = line.replace(/^#### (.+)$/gm, '<h4 style="color:#B0C4DE;">$1</h4>');
                line = line.replace(/^### (.+)$/gm, '<h3 style="color:#4682B4;">$1</h3>');
                line = line.replace(/^## (.+)$/gm, '<h2 style="color:#6495ED;">$1</h2>');
                line = line.replace(/^# (.+)$/gm, '<h1>$1</h1>');
                line = line.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>');
                line = line.replace(/\*(.+?)\*/g, '<i>$1</i>');
                html += line + '<br>';
            }
        }

        if (isCodeBlock) {
            html += '</pre>';
        }

        return html;
    }

    function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
    }

    function closeRenamePopup() {
        const popup = document.getElementById('rename-popup');
        const overlay = document.getElementById('rename-popup-overlay');
        const rename_box = document.getElementById('rename-line-box');
        rename_box.value = '';
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function closeExportPopup() {
        const popup = document.getElementById('export-popup');
        const overlay = document.getElementById('export-popup-overlay');
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function check_temporary_setting() {

        fetch('<%=build_url("admin", "network", "oasis", "confirm")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        })
        .then(response => response.json())
        .then(data => {

            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.status === "OK") {
                //console.log(data.uci_list);
                const preElement = document.getElementById("confirm-popup-pre");
                const popup = document.getElementById("confirm-popup");
                const finalizeButton = document.getElementById("finalize");
                const rollbackButton = document.getElementById("rollback");
                popup.style.display = 'block';

                const uci_list = JSON.parse(data.uci_list);

                Object.keys(uci_list).forEach(key => {
                    const items = uci_list[key];

                    if (Array.isArray(items) && items.length > 0) {
                        //console.log(`Processing items under '${key}':`);
                        items.forEach(item => {
                            if (item.class && item.param) {
                                //const { option, config, value, section } = item.class;
                                const param = item.param;
                                //const output = `Key: ${key}, Config: ${config}, Section: ${section}, Option: ${option}, Value: ${value}, Param: ${param}`;
                                preElement.textContent += `uci ${key} ${param}\n`;
                            }
                        });
                    }
                });

                finalizeButton.addEventListener("click", function (event) {
                    //console.log("finalize click");

                    fetch('<%=build_url("admin", "network", "oasis", "finalize")%>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {

                        if (data.error) {
                            console.error("Error from server:", data.error);
                            return;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });

                    popup.style.display = "none";
                });

                rollbackButton.addEventListener("click", function (event) {
                    //console.log("rollback click");

                    fetch('<%=build_url("admin", "network", "oasis", "rollback")%>', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {

                        if (data.error) {
                            console.error("Error from server:", data.error);
                            return;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });

                    popup.style.display = "none";

                    const applying_popup = document.getElementById('applying-popup');
                    const title = document.getElementById('applying-popup-title');
                    const progressBar = document.getElementById('progressBar');

                    title.textContent = "Rollback..."
                    applying_popup.style.display = 'block';
                    progressBar.style.width = '0';

                    setTimeout(() => {
                        progressBar.style.width = '100%';
                    }, 100);

                    setTimeout(() => {
                        reboot_announce.style.display = 'block';
                    }, 10100);
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    document.addEventListener('DOMContentLoaded', function () {

        loadPaperPlane();
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const chatListContainer = document.getElementById("chat-list");
        const smpChatListContainer = document.getElementById("smp-chat-item-dropdown");
        const dropdown = document.getElementById("oasis-dropdown");

        check_temporary_setting();

        fetch('<%=build_url("admin", "network", "oasis", "base-info")%>', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            const chatItems = Array.isArray(data.chat.item) ? data.chat.item
                : (typeof data.chat.item === 'object' && data.chat.item !== null && !('id' in data.chat.item)) ? []
                : (data.chat.item ? [data.chat.item] : []);

            chatItems.forEach(chat => {
                const li = document.createElement("li");
                const smp_li = document.createElement("li");

                li.setAttribute("data-id", chat.id);
                smp_li.setAttribute("data-id-for-smp", chat.id);

                const span = document.createElement("span");
                span.textContent = chat.title;
                li.appendChild(span);

                const smp_span = document.createElement("span");
                smp_span.textContent = chat.title;
                smp_li.appendChild(smp_span);

                smp_li.classList.add("smp-dropdown-item");

                const menuContainer = document.createElement("div");
                menuContainer.classList.add("oasis-hamburger-menu");

                const smp_menuContainer = document.createElement("div");
                smp_menuContainer.classList.add("oasis-hamburger-menu");

                const menuButton = document.createElement("button");
                menuButton.classList.add("oasis-menu-btn");
                menuButton.textContent = "â‹®";

                const smp_menuButton = document.createElement("button");
                smp_menuButton.classList.add("oasis-menu-btn");
                smp_menuButton.textContent = "â‹®";

                menuButton.addEventListener("click", function (event) {
                    targetChatItemId = event.target.closest("li").getAttribute("data-id");
                    event.stopPropagation();
                    const rect = this.getBoundingClientRect();
                    dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                    dropdown.style.left = `${rect.left + window.scrollX}px`;
                    dropdown.style.display = "block";
                });

                smp_menuButton.addEventListener("click", function (event) {
                    targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                    event.stopPropagation();
                    dropdown.style.display = "block";
                });

                li.addEventListener('click', function (event) {
                    const systemMessage = document.getElementById("oasis-system");

                    if (systemMessage !== null) {
                        chatMessagesContainer.removeChild(systemMessage);
                    }

                    targetChatItemId = event.target.closest("li").getAttribute("data-id");
                    if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                        return;
                    }

                    handleChatItemClick(targetChatItemId);
                });

                smp_li.addEventListener('click', function (event) {
                    const systemMessage = document.getElementById("oasis-system");

                    if (systemMessage !== null) {
                        chatMessagesContainer.removeChild(systemMessage);
                    }

                    targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                    if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                        return;
                    }

                    handleChatItemClick(targetChatItemId);

                    smpChatListContainer.style.display = "none";
                });

                menuContainer.appendChild(menuButton);
                li.appendChild(menuContainer);
                chatListContainer.appendChild(li);

                smp_menuContainer.appendChild(smp_menuButton);
                smp_li.appendChild(smp_menuContainer);
                smpChatListContainer.appendChild(smp_li);
            });

            let using_icon = data.icon.ctrl.using;
            icon_name = data.icon.list[using_icon];

            sysmsg_list = data.sysmsg;
            const sysmsg_button_container = document.getElementById('sysmsg-list-popup-buttons');
            sysmsg_button_container.innerHTML = '';  // clear existing buttons

            const sortedSysmsgList = sysmsg_list
                .map(item => {
                    if (!item.key || typeof item.key !== "string") return null;

                    if (item.key === "default") {
                        return {
                            key: item.key,
                            title: item.title || "Default",
                            number: -1
                        };
                    }

                    const match = item.key.match(/^custom_(\d+)$/);
                    if (!match) return null;

                    return {
                        key: item.key,
                        title: item.title || "No Title",
                        number: parseInt(match[1], 10)
                    };
                })
                .filter(item => item !== null)
                .sort((a, b) => a.number - b.number);

            sortedSysmsgList.forEach(item => {
                const sysmsg_select_button = document.createElement('input');
                sysmsg_select_button.type = 'button';
                sysmsg_select_button.value = item.title;
                sysmsg_select_button.className = 'sysmsg-select-button';

                sysmsg_select_button.addEventListener('click', function() {
                    sysmsg_key = item.key;
                    const sysmsg_list_popup = document.getElementById('sysmsg-list-popup');
                    sysmsg_list_popup.style.display = 'none';

                    const systemMessage = document.getElementById("oasis-system");
                    const messageInput = document.getElementById('message-input');
                    const messageText = messageInput.value.trim().replace(/\\n/g, '\n');

                    if (!messageText) {
                        return;
                    }

                    send_chat_data(systemMessage, messageInput, messageText);
                });

                sysmsg_button_container.appendChild(sysmsg_select_button);
            });

            ai_service_list = Array.isArray(data.service) ? data.service : [];
            const aiServiceSelect = document.getElementById("ai-service-list");
            aiServiceSelect.innerHTML = '';  // clear existing options

            if (ai_service_list.length === 0) {
                const option = document.createElement("option");
                option.value = 0;
                option.textContent = "No AI Service";
                aiServiceSelect.appendChild(option);
            } else {
                ai_service_list.forEach((service, index) => {
                    const option = document.createElement("option");
                    option.value = index;
                    option.textContent = `${service.name} - ${service.model}`;
                    aiServiceSelect.appendChild(option);
                });
            }

            const uciConfigSelect = document.getElementById("uci-config-list");
            uciConfigSelect.innerHTML = '';
            const defaultOption = document.createElement("option");
            defaultOption.value = "---";
            defaultOption.textContent = "---";
            uciConfigSelect.appendChild(defaultOption);

            data.configs.forEach(config => {
                const option = document.createElement("option");
                option.value = config;
                option.textContent = config;
                uciConfigSelect.appendChild(option);
            });

        })
        .catch(error => {
            console.error('Error:', error);
        });

        function isMobile() {
            return (
                /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || 
                (navigator.maxTouchPoints > 0 && window.innerWidth <= 500)
            );
        }

        if (isMobile()) {
            document.getElementById("message-input").addEventListener("keydown", function(event) {
                if (event.key === "ArrowRight") {
                    event.preventDefault();
                    document.getElementById("send-button").click();
                }
            });

            document.getElementById("message-input").addEventListener("focus", function() {
                setTimeout(() => {
                    this.scrollIntoView({ behavior: "smooth", block: "center" });
                }, 300);
            });
        }

        document.addEventListener("click", function () {
            dropdown.style.display = 'none';
        });

        document.addEventListener("click", function (event) {
            const target = event.target;

            if (target.classList.contains("oasis-menu-item")) {
                const action = target.getAttribute("data-action");

                if (action === "delete") {
                    handleDeleteAction(target);
                } else if (action === "rename") {
                    handleRenameAction(target, targetChatItemId);
                } else if (action === "export") {
                    handleExportAction(target, targetChatItemId);
                }
            }
        });

        function handleDeleteAction(button) {

            //console.log("Deleting chat with ID:", targetChatItemId);

            if (activeConversation) {
                return;
            }

            fetch('<%=build_url("admin", "network", "oasis", "delete-chat-data")%>', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({ params: targetChatItemId }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "OK") {
                    const listItem = document.querySelector(`#chat-list li[data-id='${targetChatItemId}']`);
                    const smp_listItem = document.querySelector(`#smp-chat-item-dropdown li[data-id-for-smp='${targetChatItemId}']`);
                    if (listItem && smp_listItem) {
                        listItem.remove();
                        smp_listItem.remove();

                        const chatMessagesContainer = document.querySelector('.chat-messages');

                        if (chatMessagesContainer) {
                            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
                            messages.forEach(message => message.remove());
                        }
                        targetChatId = ""; // clear target id
                    } else {
                        console.error("Could not find the list item with ID:", targetChatItemId);
                    }
                } else {
                    console.error("Error deleting chat:", data.error);
                    alert("Failed to delete chat. Please try again.");
                }
            })
            .catch((error) => {
                console.error("Request failed:", error);
                alert("Failed to delete chat. Please try again.");
            });
        }

        function handleRenameAction(button) {

            //console.log("Renaming chat with ID:", targetChatItemId);
            //const newName = prompt("Enter new name for the chat:", "");

            const renameLineBox = document.getElementById('rename-line-box');
            const popup = document.getElementById('rename-popup');
            const overlay = document.getElementById('rename-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            const rename = document.getElementById("rename");

            chatList.item.forEach(chat => {
                //console.log("chat.id = " + chat.id);
                if (chat.id === targetChatItemId) {
                    title = chat.title;
                }
            });

            renameLineBox.setAttribute('placeholder', title);
            renameLineBox.setAttribute('autocomplete', 'off');

            rename.addEventListener('click', function() {

                const rename_box = document.getElementById('rename-line-box');
                let new_title = rename_box.value;

                if (new_title.length === 0) {
                    return;
                }

                fetch('<%=build_url("admin", "network", "oasis", "rename-chat")%>', {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ id: targetChatItemId, title: new_title })
                })
                .then((response) => response.json())
                .then((data) => {
                    if (data.error) {
                        console.error("Error renaming chat:", data.error);
                        return;
                    }
                })
                .catch((error) => {
                    console.error("Request failed:", error);
                    //alert("Failed to rename chat. Please try again.");
                });

                const listItem = document.querySelector(`li[data-id="${targetChatItemId}"]`);
                const smp_listItem = document.querySelector(`li[data-id-for-smp="${targetChatItemId}"]`);
                const spanElement = listItem.querySelector("span");
                const smp_spanElement = smp_listItem.querySelector("span");
                spanElement.textContent = new_title;
                smp_spanElement.textContent = new_title;
                rename_box.value = "";

                chatList.item.forEach(chat => {
                    if (chat.id === targetChatItemId) {
                        chat.title = new_title;
                        //console.log("chat.title = " + chat.title);
                    }
                });

                closeRenamePopup();
            }, { once: true })
        }

        function handleExportAction(button, id) {
            const popup = document.getElementById('export-popup');
            const overlay = document.getElementById('export-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            //console.log("id = " + id);

            const json_export = document.getElementById("json-export");
            const text_export = document.getElementById("text-export");

            json_export.addEventListener('click', function() {
                //console.log("Push JSON!!");

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    raw_data = JSON.stringify(data, null, 2);

                    const blob = new Blob([raw_data], { type: "application/json" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            text_export.addEventListener('click', function() {

                let chat_data = "";

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    data.messages.forEach(message => {
                        if (message.role === 'user') {
                            chat_data += ">>> You\n";
                        } else if (message.role === 'assistant') {
                            chat_data += ">>> AI\n";
                        }

                        if ((message.role === 'user') || (message.role === 'assistant')) {
                            chat_data += message.content + "\n\n";
                        }
                    });

                    const blob = new Blob([chat_data], { type: "text/plain" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.txt`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    //console.log("Text file downloaded successfully.");
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            text_export.addEventListener('click', function() {
                //console.log("Push TEXT!!");
                closeExportPopup();
            });
        }
    });

    function showTitlePopup(title) {
        if (title) {
            const popup = document.createElement('div');
            popup.textContent = title;
            popup.classList.add('popup');

            document.body.appendChild(popup);

            setTimeout(() => {
                popup.classList.add('show');
            }, 10);

            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('hide');
                setTimeout(() => {
                    popup.remove();
                }, 500);
            }, 5000);
        } else {
            console.error('Title not found in JSON data.');
        }
    }

    async function send_chat_data(systemMessage, messageInput, messageText) {

        const messageContainer = document.createElement('div');
        messageContainer.className = 'message sent';

        const messageTextContainer = document.createElement('div');
        messageTextContainer.className = 'message-text';
        //messageTextContainer.textContent = messageText;
        messageTextContainer.innerHTML = convertMarkdownToHTML(messageText);

        messageContainer.appendChild(messageTextContainer);

        document.querySelector('.chat-messages').appendChild(messageContainer);

        if (systemMessage !== null) {
            document.querySelector('.chat-messages').removeChild(systemMessage);
        }
    
        messageInput.value = '';
        messageInput.focus();

        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const receivedMessageContainer = document.createElement('div');
        receivedMessageContainer.className = 'message received';

        const iconPath = `${resourcePath}/luci-app-oasis/${icon_name}`;
        const receivedIconContainer = document.createElement('div');
        receivedIconContainer.className = 'icon';
        receivedIconContainer.style.backgroundImage = `url(${iconPath})`;

        const receivedMessageTextContainer = document.createElement('div');
        receivedMessageTextContainer.className = 'message-text chat-bubble';

        const typingDots = document.createElement("span");
        typingDots.classList.add("typing-dots");

        for (let i = 0; i < 3; i++) {
            const dot = document.createElement("span");
            typingDots.appendChild(dot);
        }

        receivedMessageTextContainer.appendChild(typingDots);
    
        receivedMessageContainer.appendChild(receivedIconContainer);
        receivedMessageContainer.appendChild(receivedMessageTextContainer);

        document.querySelector('.chat-messages').appendChild(receivedMessageContainer);
        
        chatMessages.scrollTop = chatMessages.scrollHeight;

        let uci_info = await retrieve_uci_show_result(messageTextContainer);
        messageText += uci_info;
        console.log(messageText);
        send_message(receivedMessageTextContainer, messageText);
    }

    document.getElementById('smp-send-button').addEventListener('click', function(event) {
        event.preventDefault();
        document.getElementById("send-button").click();
    });

    document.getElementById('send-button').addEventListener('click', async function() {

        const systemMessage = document.getElementById("oasis-system");
        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();

        if (!messageText) {
            return;
        }

        if (message_outputing) {
            return;
        }

        message_outputing = true;

        if (targetChatId.length === 0) {
            const sysmsg_list_popup = document.getElementById("sysmsg-list-popup");
            sysmsg_list_popup.style.display = "block";
            return;
        }

        send_chat_data(systemMessage, messageInput, messageText);
    });

    function show_chat_popup(jsonResponse) {
        message_outputing = false;
        targetChatId = jsonResponse.id;
        //console.log("targetChatId = " + targetChatId);
        //showTitlePopup(jsonResponse.title);

        const itemCount = (chatList !== null) ? chatList.item.length : 0;
        
        if (itemCount === 0) {
            chatList = { item:[] };  
        }

        chatList.item.push({id: jsonResponse.id, title: jsonResponse.title})
        
        // New Chat List Item
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const chatListContainer = document.getElementById("chat-list");
        const smpChatListContainer = document.getElementById("smp-chat-item-dropdown")
        const li = document.createElement("li");
        const smp_li = document.createElement("li")

        li.setAttribute("data-id", targetChatId);

        smp_li.setAttribute("data-id-for-smp", targetChatId);
        smp_li.classList.add("smp-dropdown-item");

        const span = document.createElement("span");
        span.textContent = jsonResponse.title;

        const smp_span = document.createElement("span");
        smp_span.textContent = jsonResponse.title;

        const menuContainer = document.createElement("div");
        menuContainer.classList.add("oasis-hamburger-menu");

        const smp_menuContainer = document.createElement("div");
        smp_menuContainer.classList.add("oasis-hamburger-menu");

        const menuButton = document.createElement("button");
        menuButton.classList.add("oasis-menu-btn");
        menuButton.textContent = "â‹®";
        menuContainer.appendChild(menuButton);

        li.appendChild(span);
        li.appendChild(menuContainer);
        chatListContainer.appendChild(li);

        const smp_menuButton = document.createElement("button");
        smp_menuButton.classList.add("oasis-menu-btn");
        smp_menuButton.textContent = "â‹®";
        smp_menuContainer.appendChild(smp_menuButton);
        smp_li.appendChild(smp_span);
        smp_li.appendChild(smp_menuContainer);
        smpChatListContainer.appendChild(smp_li);

        li.addEventListener('click', function (event) {
            const systemMessage = document.getElementById("oasis-system");

            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }

            targetChatItemId = event.target.closest("li").getAttribute("data-id");
            if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                return;
            }

            handleChatItemClick(targetChatItemId);
        });

        smp_li.addEventListener('click', function (event) {
            const systemMessage = document.getElementById("oasis-system");

            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }

            //console.log("click 2");
            targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");

            handleChatItemClick(targetChatItemId);

            smpChatListContainer.style.display = "none";
        });

        menuButton.addEventListener("click", function (event) {
            //console.log("click 3");
            const dropdown = document.getElementById("oasis-dropdown");
            targetChatItemId = event.target.closest("li").getAttribute("data-id");
            event.stopPropagation();
            const rect = this.getBoundingClientRect();
            dropdown.style.top = `${rect.bottom + window.scrollY}px`;
            dropdown.style.left = `${rect.left + window.scrollX}px`;
            dropdown.style.display = "block";
        });

        smp_menuButton.addEventListener("click", function (event) {
            //console.log("click 4");
            const dropdown = document.getElementById("oasis-dropdown");
            targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
            event.stopPropagation();
            dropdown.style.display = "block";
        });
    }

    function save_apply_proc(jsonResponse, type) {
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const popup = document.getElementById('applying-popup');
        const title = document.getElementById('applying-popup-title');
        const progressBar = document.getElementById('progressBar');
        //const closePopupButton = document.getElementById('close-applying-popup');

        let uci_list_json = JSON.stringify(jsonResponse.uci_list);

        fetch('<%=build_url("admin", "network", "oasis", "apply-uci-cmd")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({uci_list : uci_list_json, id : targetChatId, type : type})
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });

        const systemMessage = document.getElementById("oasis-system");
        if (systemMessage !== null) {
            chatMessagesContainer.removeChild(systemMessage);
        }

        title.textContent = "Applying the settings...";
        popup.style.display = 'block';
        progressBar.style.width = '0';

        setTimeout(() => {
            progressBar.style.width = '100%';
        }, 100);

        setTimeout(() => {
            window.location.reload();
        }, 10000);

        /*
        closePopupButton.addEventListener('click', () => {
            //popup.style.display = 'none';
            window.location.reload();
        });
        */
    }

    function show_notify_popup(jsonResponse) {
        const chatMessagesContainer = document.querySelector('.chat-messages');
        const systemMessage = document.createElement("div");

        systemMessage.classList.add("message", "oasis-system");
        systemMessage.id = "oasis-system";

        const messageTextDiv = document.createElement("div");
        messageTextDiv.className = "message-text";

        const textNode = document.createTextNode("OpenWrt UCI Commands");
        messageTextDiv.appendChild(textNode);

        const preElement = document.createElement("pre");
        preElement.className = "console-command-color";
        preElement.id = "uci-popup-pre";

        Object.keys(jsonResponse.uci_list).forEach(key => {
            const items = jsonResponse.uci_list[key];

            if (Array.isArray(items) && items.length > 0) {
                //console.log(`Processing items under '${key}':`);
                items.forEach(item => {
                    if (item.class && item.param) {
                        //const { option, config, value, section } = item.class;
                        const param = item.param;
                        //const output = `Key: ${key}, Config: ${config}, Section: ${section}, Option: ${option}, Value: ${value}, Param: ${param}`;
                        preElement.textContent += `uci ${key} ${param}\n`;
                    }
                });
            }
        });

        //preElement.textContent = `uci set network.lan.ipaddr=192.168.1.1\nuci set network.lan.proto=static`;
        messageTextDiv.appendChild(preElement);

        const popupButtonsDiv = document.createElement("div");
        popupButtonsDiv.className = "uci-popup-buttons";

        const popupDiv = document.createElement("div");
        popupDiv.className = "uci-popup";

        // TODO: Ask button will be added later
        // const askButton = document.createElement("button");
        // askButton.id = "ask";
        // askButton.textContent = "Ask";
        // popupDiv.appendChild(askButton);

        const applyButton = document.createElement("button");
        applyButton.id = "apply";
        applyButton.textContent = "Apply";
        applyButton.addEventListener('click', function (event) {
            save_apply_proc(jsonResponse, "commit");
        });

        popupDiv.appendChild(applyButton);

        const cancelButton = document.createElement("button");
        cancelButton.id = "uci-cancel";
        cancelButton.textContent = "Cancel";
        cancelButton.addEventListener('click', function (event) {
            const systemMessage = document.getElementById("oasis-system");
            chatMessagesContainer.removeChild(systemMessage);
        });

        popupDiv.appendChild(cancelButton);

        popupButtonsDiv.appendChild(popupDiv);
        messageTextDiv.appendChild(popupButtonsDiv);
        systemMessage.appendChild(messageTextDiv);
        chatMessagesContainer.appendChild(systemMessage);
    }


    // TODO: Temporary Fix
    // This function will be removed later.
    function isNumeric(str) {
        return /^\d+$/.test(str);
    }

    async function retrieve_uci_show_result(messageTextContainer) {

        const selectElement = document.getElementById("uci-config-list");
        let target_uci_config = selectElement.value;
        //console.log(target_uci_config);

        if (target_uci_config === '---') {
            return '';
        }

        let uci_info = '';

        try {
            const response = await fetch('<%=build_url("admin", "network", "oasis", "uci-show")%>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: new URLSearchParams({ target: target_uci_config })
            });

            const data = await response.json();

            uci_info = '\n\n### [User\'s ' + target_uci_config + ' config]\n';
            uci_info += '```\n';

            for (let i = 0; i < data.length; i++) {
                uci_info += data[i] + '\n';
            }

            uci_info += '```\n';
            messageTextContainer.innerHTML += convertMarkdownToHTML(uci_info);

        } catch (error) {
            console.error('Error:', error);
            return '';
        }

        selectElement.value = '---';
        return uci_info;
    }


    async function send_message(receivedMessageTextContainer, messageText) {
        activeConversation = true;
        const baseUrl = `${window.location.protocol}//${window.location.hostname}`;
        let fullMessage = '';
        let finalResponse = null;
        let is_notify = false;

        console.log("send message: " + messageText);

        try {
            const response = await fetch(`${baseUrl}/cgi-bin/oasis`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cmd: "chat",
                    id: targetChatId,
                    message: messageText,
                    sysmsg_key: sysmsg_key, 
                })
            });

            if (!response.ok) {
                console.error('Error:', response.statusText);
                return;
            }

            const chatMessages = document.querySelector('.chat-messages');
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let buffer = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value, { stream: true });
                buffer += chunk;

                const parts = buffer.split(/(?<=})\s*(?={)/g);
                buffer = parts.pop() || '';

                for (const part of parts) {
                    try {
                        const jsonResponse = JSON.parse(part.trim());

                        if (jsonResponse.message?.content) {
                            fullMessage += jsonResponse.message.content;
                            receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }

                        if (jsonResponse.id && isNumeric(jsonResponse.id)) {
                            show_chat_popup(jsonResponse);
                        }

                        if (jsonResponse.uci_notify && !is_notify) {
                            show_notify_popup(jsonResponse);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                            is_notify = true;
                        }
                    } catch (e) {
                        fullMessage = "Json Parse Error";
                        receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
                        receivedMessageTextContainer.style.color = "red";
                    }
                }
            }

            if (buffer.trim()) {
                try {
                    finalResponse = JSON.parse(buffer.trim());

                    if (finalResponse.id && isNumeric(finalResponse.id)) {
                        show_chat_popup(finalResponse);
                    }

                    if (finalResponse.uci_notify && !is_notify) {
                        show_notify_popup(finalResponse);
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                        is_notify = true;
                    }

                    if (finalResponse.message?.content) {
                        fullMessage += finalResponse.message.content;
                    }
                } catch (e) {
                    console.error('JSON Parse Error', e);
                    console.error(buffer.trim());
                    fullMessage = "Error!\n";
                    fullMessage += "The network might be disconnected, or the AI service settings might be incorrect.\n\n";
                    fullMessage += "[OpenAI]\n";
                    fullMessage += "If you want to use OpenAI, you need to set the Endpoint to the following Endpoint.\n\n";
                    fullMessage += "Endpoint:\n";
                    fullMessage += "```\nhttps://api.openai.com/v1/chat/completions\n```\n";
                    fullMessage += "You can create an API Key from your OpenAI account page. Please use that.\n\n";
                    fullMessage += "[Ollama]\n";
                    fullMessage += "If you want to use Ollama, you need to set the Ollama parameters (OLLAMA_HOST and OLLAMA_ORIGINS) with the values shown below.\n";
                    fullMessage += "```\nOLLAMA_HOST=0.0.0.0\nOLLAMA_ORIGINS=*\n```\n";
                    fullMessage += "Change the Ollama parameter configuration file (Linux) or environment variables (Windows) that exist on the PC where Ollama is installed to the above values.\n\n";
                    fullMessage += "Endpoint:\n";
                    fullMessage += "```\nhttp://[Your Ollama PC Address]:11434/api/chat\n```\n";
                    fullMessage += "When using Ollama, an API key is typically not required, so nothing needs to be entered in the API Key field on this settings page.";
                }
            }

            receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
            chatMessages.scrollTop = chatMessages.scrollHeight;
        } catch (error) {
            console.error('Request failed', error);
        } finally {
            message_outputing = false;
            activeConversation = false;
        }
    }

    function handleChatItemClick(chatId) {

        //console.log("chat id = " + chatId);

        if (activeConversation) {
            return;
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ params: chatId })
        })
        .then(response => response.json())
        .then(data => {

            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    const messageTextDiv = document.createElement('div');

                    if (message.role === 'user') {
                        messageDiv.className = 'message sent';
                    } else if (message.role === 'assistant') {
                        messageDiv.className = 'message received';

                        const iconPath = `${resourcePath}/luci-app-oasis/${icon_name}`;
                        const iconDiv = document.createElement('div');
                        iconDiv.className = 'icon';
                        iconDiv.style.backgroundImage = `url(${iconPath})`;

                        messageDiv.appendChild(iconDiv);
                    }

                    if (message.role === 'user' || message.role === 'assistant') {
                        messageTextDiv.className = 'message-text';
                        message.content = convertMarkdownToHTML(message.content);
                        messageTextDiv.innerHTML = message.content;
                        //messageTextDiv.textContent = message.content;

                        messageDiv.appendChild(messageTextDiv);

                        chatMessagesContainer.appendChild(messageDiv);
                    }
                });
            } 
            
            //else {
            //    console.error("Unexpected data format:", data);
            //}
        })
        .catch(error => {
            console.error('Error:', error);
        });
        targetChatId = chatId;
    }

    async function new_chat_action() {
        if (activeConversation || message_outputing) {
            return;
        }

        targetChatId = "";

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const systemMessage = document.getElementById("oasis-system");
            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }
    }

    document.getElementById('smp-new-button').addEventListener('click', async function() {
        if (activeConversation || message_outputing) {
            return;
        }

        targetChatId = "";

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const systemMessage = document.getElementById("oasis-system");
            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        const dropdown = document.getElementById('menu-trigger').nextElementSibling;
        const isVisible = dropdown.style.display === "block";

        dropdown.style.display = isVisible ? "none" : "block";
    });

    document.getElementById('new-button').addEventListener('click', async function() {
        if (activeConversation || message_outputing) {
            return;
        }

        targetChatId = "";

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const systemMessage = document.getElementById("oasis-system");
            if (systemMessage !== null) {
                chatMessagesContainer.removeChild(systemMessage);
            }
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }
    });

    document.getElementById('import-chat-data').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {

                const base64Data = e.target.result.split(",")[1];
 
                fetch('<%=build_url("admin", "network", "oasis", "import-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ chat_data: base64Data })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        alert("Unexpected data format");
                        return;
                    }

                    //console.log('Success:', data);
                    const chatMessagesContainer = document.querySelector('.chat-messages');
                    const chatListContainer = document.getElementById("chat-list");
                    const smpChatListContainer = document.getElementById("smp-chat-item-dropdown")
                    const dropdown = document.getElementById("oasis-dropdown");

                    const li = document.createElement("li");
                    const smp_li = document.createElement("li");

                    li.setAttribute("data-id", data.id);
                    smp_li.setAttribute("data-id-for-smp", data.id);

                    const span = document.createElement("span");
                    span.textContent = data.title;
                    li.appendChild(span);

                    const smp_span = document.createElement("span");
                    smp_span.textContent = data.title;
                    smp_li.appendChild(smp_span);

                    smp_li.classList.add("smp-dropdown-item");

                    const menuContainer = document.createElement("div");
                    menuContainer.classList.add("oasis-hamburger-menu");

                    const smp_menuContainer = document.createElement("div");
                    smp_menuContainer.classList.add("oasis-hamburger-menu");

                    const menuButton = document.createElement("button");
                    menuButton.classList.add("oasis-menu-btn");
                    menuButton.textContent = "â‹®";

                    const smp_menuButton = document.createElement("button");
                    smp_menuButton.classList.add("oasis-menu-btn");
                    smp_menuButton.textContent = "â‹®";

                    menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        event.stopPropagation();
                        const rect = this.getBoundingClientRect();
                        dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    smp_menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        event.stopPropagation();
                        //const rect = this.getBoundingClientRect();
                        //dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        //dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    li.addEventListener('click', function (event) {
                        const systemMessage = document.getElementById("oasis-system");

                        if (systemMessage !== null) {
                            chatMessagesContainer.removeChild(systemMessage);
                        }

                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        handleChatItemClick(targetChatItemId);
                    });

                    smp_li.addEventListener('click', function (event) {

                        const systemMessage = document.getElementById("oasis-system");

                        if (systemMessage !== null) {
                            chatMessagesContainer.removeChild(systemMessage);
                        }

                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        handleChatItemClick(targetChatItemId);

                        //console.log("smp = " + targetChatItemId);

                        smpChatListContainer.style.display = "none";
                    });

                    menuContainer.appendChild(menuButton);
                    li.appendChild(menuContainer);
                    chatListContainer.appendChild(li);

                    smp_menuContainer.appendChild(smp_menuButton);
                    smp_li.appendChild(smp_menuContainer)
                    smpChatListContainer.appendChild(smp_li);

                    const itemCount = (chatList !== null) ? chatList.item.length : 0;
        
                    if (itemCount === 0) {
                        chatList = { item:[] };  
                    }

                    chatList.item.push({id: data.id, title: data.title})
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            };
            reader.readAsDataURL(file);
        }
    });


    document.getElementById('smp-import-chat-data').addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {

                const base64Data = e.target.result.split(",")[1];
 
                fetch('<%=build_url("admin", "network", "oasis", "import-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ chat_data: base64Data })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        alert("Unexpected data format");
                        return;
                    }

                    //console.log('Success:', data);
                    const chatMessagesContainer = document.querySelector('.chat-messages');
                    const chatListContainer = document.getElementById("chat-list");
                    const smpChatListContainer = document.getElementById("smp-chat-item-dropdown")
                    const dropdown = document.getElementById("oasis-dropdown");

                    const li = document.createElement("li");
                    const smp_li = document.createElement("li");

                    li.setAttribute("data-id", data.id);
                    smp_li.setAttribute("data-id-for-smp", data.id);

                    const span = document.createElement("span");
                    span.textContent = data.title;
                    li.appendChild(span);

                    const smp_span = document.createElement("span");
                    smp_span.textContent = data.title;
                    smp_li.appendChild(smp_span);

                    smp_li.classList.add("smp-dropdown-item");

                    const menuContainer = document.createElement("div");
                    menuContainer.classList.add("oasis-hamburger-menu");

                    const smp_menuContainer = document.createElement("div");
                    smp_menuContainer.classList.add("oasis-hamburger-menu");

                    const menuButton = document.createElement("button");
                    menuButton.classList.add("oasis-menu-btn");
                    menuButton.textContent = "â‹®";

                    const smp_menuButton = document.createElement("button");
                    smp_menuButton.classList.add("oasis-menu-btn");
                    smp_menuButton.textContent = "â‹®";

                    menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        event.stopPropagation();
                        const rect = this.getBoundingClientRect();
                        dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    smp_menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        event.stopPropagation();
                        //const rect = this.getBoundingClientRect();
                        //dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        //dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    li.addEventListener('click', function (event) {
                        const systemMessage = document.getElementById("oasis-system");

                        if (systemMessage !== null) {
                            chatMessagesContainer.removeChild(systemMessage);
                        }

                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        handleChatItemClick(targetChatItemId);
                    });

                    smp_li.addEventListener('click', function (event) {

                        const systemMessage = document.getElementById("oasis-system");

                        if (systemMessage !== null) {
                            chatMessagesContainer.removeChild(systemMessage);
                        }

                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        handleChatItemClick(targetChatItemId);

                        //console.log("smp = " + targetChatItemId);

                        smpChatListContainer.style.display = "none";
                    });

                    menuContainer.appendChild(menuButton);
                    li.appendChild(menuContainer);
                    chatListContainer.appendChild(li);

                    smp_menuContainer.appendChild(smp_menuButton);
                    smp_li.appendChild(smp_menuContainer)
                    smpChatListContainer.appendChild(smp_li);

                    const itemCount = (chatList !== null) ? chatList.item.length : 0;
        
                    if (itemCount === 0) {
                        chatList = { item:[] };  
                    }

                    chatList.item.push({id: data.id, title: data.title})
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById("ai-service-list").addEventListener("change", function(event) {
      const selected_service_index = parseInt(event.target.value, 10);
      const current_service = ai_service_list[selected_service_index];

      if (current_service) {

        fetch('<%=build_url("admin", "network", "oasis", "select-ai-service")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams(
            {
                identifier: current_service.identifier,
                name: current_service.name,
                model: current_service.model
            }),
        })
        .then(response => {
          if (!response.ok) throw new Error('Transmission failure');
          return response.json();
        })
        .then(data => {
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }
    });
</script>

<%+footer%>
