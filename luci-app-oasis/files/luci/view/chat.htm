<%+header%>

<link rel="stylesheet" type="text/css" href="<%= resource %>/luci-app-oasis/chat.css">

<div class="oasis-container">
    <div class="chat-list-container">
        <ul id="chat-list"></ul>
    </div>

    <div class="chat-container">
        <ul class="smp-chat-hamburger-menu">
            <li id="menu-trigger">☰</li>
            <ul id="smp-chat-item-dropdown"></ul>
        </ul>
        <div class="chat-messages">
            <!--
            <div class="message oasis-system">
                <div class="message-text">
                    OpenWrt UCI Commands
<pre class="console-command-color">
uci set network.lan.ipaddr=192.168.1.1
uci set network.lan.proto=static
</pre>
                    <div class="uci-popup-buttons">
                        <div class="uci-popup">
                            <button id="ask">Ask</button>
                            <button id="apply">Apply</button>
                            <button id="uci-cancel">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
            -->
        </div>
        <div class="chat-input">
            <textarea id="message-input" placeholder="Your Message"></textarea>
            <div class="chat-buttons">
                <button id="send-button">Send</button>
                <button id="new-button">New</button>
            </div>
        </div>
    </div>

    <div class="oasis-dropdown" id="oasis-dropdown">
        <button class="oasis-menu-item" data-action="delete">Delete</button>
        <button class="oasis-menu-item" data-action="rename">Rename</button>
        <button class="oasis-menu-item" data-action="export">Export</button>
        <button class="oasis-menu-item" data-action="cancel">Cancel</button>
    </div>

    <div class="rename-popup-overlay" id="rename-popup-overlay"></div>
    <div class="rename-popup" id="rename-popup">
        <h3>Rename chat name</h3>
        <input type="text" id="rename-line-box" >
        <div class="rename-popup-buttons">
            <button id="rename">Rename</button>
            <button id="rename-cancel" onclick="closeRenamePopup()">Cancel</button>
        </div>
    </div>

    <div class="export-popup-overlay" id="export-popup-overlay"></div>
    <div class="export-popup" id="export-popup">
        <h3>Select Export Type</h3>
        <div class="export-popup-buttons">
            <button id="json-export">Raw(JSON)</button>
            <button id="text-export">Text</button>
            <button id="export-cancel" onclick="closeExportPopup()">Cancel</button>
        </div>
    </div>
</div>

<script>

    const chatItems = null;
    let activeConversation = false;
    let targetChatItemId = null;
    let chatList = null;

    /* chat data list for smartphone */
    document.getElementById("menu-trigger").addEventListener("click", function () {
        const dropdown = this.nextElementSibling;
        const isVisible = dropdown.style.display === "block";

        dropdown.style.display = isVisible ? "none" : "block";
    });

    function convertMarkdownToHTML(input) {
        let html = '';
        let isCodeBlock = false;
        let currentLanguage = '';
        const lines = input.split('\n');

        for (let line of lines) {

            const trimmedLine = line.trim()

            if (trimmedLine.startsWith('```')) {
                if (!isCodeBlock) {
                    currentLanguage = trimmedLine.slice(3).trim();
                    const languageClass = currentLanguage ? ` language-${escapeHTML(currentLanguage)}` : '';
                    html += `<pre class="console-command-color${languageClass}">`;
                    isCodeBlock = true;
                } else {
                    html += '</pre>';
                    isCodeBlock = false;
                }
            } else if (isCodeBlock) {
                html += escapeHTML(line) + '\n';
            } else {
                line = line.replace(/^###### (.+)$/gm, '<h6 style="color:#DCDCDC;">$1</h6>');
                line = line.replace(/^##### (.+)$/gm, '<h5 style="color:#708090;">$1</h5>');
                line = line.replace(/^#### (.+)$/gm, '<h4 style="color:#B0C4DE;">$1</h4>');
                line = line.replace(/^### (.+)$/gm, '<h3 style="color:#4682B4;">$1</h3>');
                line = line.replace(/^## (.+)$/gm, '<h2 style="color:#6495ED;">$1</h2>');
                line = line.replace(/^# (.+)$/gm, '<h1>$1</h1>');
                line = line.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>');
                line = line.replace(/\*(.+?)\*/g, '<i>$1</i>');
                html += line + '<br>';
            }
        }

        if (isCodeBlock) {
            html += '</pre>';
        }

        return html;
    }

    function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
    }

    function closeRenamePopup() {
        const popup = document.getElementById('rename-popup');
        const overlay = document.getElementById('rename-popup-overlay');
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    function closeExportPopup() {
        const popup = document.getElementById('export-popup');
        const overlay = document.getElementById('export-popup-overlay');
        popup.style.display = 'none';
        overlay.style.display = 'none';
    }

    document.addEventListener('DOMContentLoaded', function () {

        const chatListContainer = document.getElementById("chat-list");
        const smpChatListContainer = document.getElementById("smp-chat-item-dropdown")
        const dropdown = document.getElementById("oasis-dropdown");

        fetch('<%=build_url("admin", "network", "oasis", "chat-list")%>', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if ((data.item) && (data.item.length > 0) &&  Array.isArray(data.item)) {

                chatList = data;

                data.item.forEach(chat => {
                    const li = document.createElement("li");
                    const smp_li = document.createElement("li");

                    li.setAttribute("data-id", chat.id);
                    smp_li.setAttribute("data-id-for-smp", chat.id);

                    const span = document.createElement("span");
                    span.textContent = chat.title;
                    li.appendChild(span);

                    const smp_span = document.createElement("span");
                    smp_span.textContent = chat.title;
                    smp_li.appendChild(smp_span);

                    smp_li.classList.add("smp-dropdown-item");

                    const menuContainer = document.createElement("div");
                    menuContainer.classList.add("oasis-hamburger-menu");

                    const smp_menuContainer = document.createElement("div");
                    smp_menuContainer.classList.add("oasis-hamburger-menu");

                    const menuButton = document.createElement("button");
                    menuButton.classList.add("oasis-menu-btn");
                    menuButton.textContent = "⋮";

                    const smp_menuButton = document.createElement("button");
                    smp_menuButton.classList.add("oasis-menu-btn");
                    smp_menuButton.textContent = "⋮";

                    menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        event.stopPropagation();
                        const rect = this.getBoundingClientRect();
                        dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    smp_menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        event.stopPropagation();
                        //const rect = this.getBoundingClientRect();
                        //dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        //dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    smp_li.addEventListener('click', function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        handleChatItemClick(targetChatItemId);

                        //console.log("smp = " + targetChatItemId);

                        smpChatListContainer.style.display = "none";
                    });

                    menuContainer.appendChild(menuButton);
                    li.appendChild(menuContainer);
                    chatListContainer.appendChild(li);

                    smp_menuContainer.appendChild(smp_menuButton);
                    smp_li.appendChild(smp_menuContainer)
                    smpChatListContainer.appendChild(smp_li);
                });

                const chatItems = document.querySelectorAll('#chat-list li');
                chatItems.forEach(item => {
                    item.addEventListener('click', function (event) {

                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        const chatId = this.getAttribute('data-id');
                        handleChatItemClick(chatId);
                    });
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });

        document.addEventListener("click", function () {
            dropdown.style.display = 'none';
        });

        document.addEventListener("click", function (event) {
            const target = event.target;

            if (target.classList.contains("oasis-menu-item")) {
                const action = target.getAttribute("data-action");

                if (action === "delete") {
                    handleDeleteAction(target);
                } else if (action === "rename") {
                    handleRenameAction(target, targetChatItemId);
                } else if (action === "export") {
                    handleExportAction(target, targetChatItemId);
                }
            }
        });

        function handleDeleteAction(button) {

            //console.log("Deleting chat with ID:", targetChatItemId);

            if (activeConversation) {
                return;
            }

            fetch('<%=build_url("admin", "network", "oasis", "delete-chat-data")%>', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({ params: targetChatItemId }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "OK") {
                    //console.log(`Chat ID ${targetChatItemId} deleted successfully.`);
                    const listItem = document.querySelector(`#chat-list li[data-id='${targetChatItemId}']`);
                    const smp_listItem = document.querySelector(`#smp-chat-item-dropdown li[data-id-for-smp='${targetChatItemId}']`);
                    if (listItem && smp_listItem) {
                        listItem.remove();
                        smp_listItem.remove();

                        const chatMessagesContainer = document.querySelector('.chat-messages');

                        if (chatMessagesContainer) {
                            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
                            messages.forEach(message => message.remove());
                        }
                    } else {
                        console.error("Could not find the list item with ID:", targetChatItemId);
                    }
                } else {
                    console.error("Error deleting chat:", data.error);
                    alert("Failed to delete chat. Please try again.");
                }
            })
            .catch((error) => {
                console.error("Request failed:", error);
                alert("Failed to delete chat. Please try again.");
            });
        }

        function handleRenameAction(button) {

            //console.log("Renaming chat with ID:", targetChatItemId);
            //const newName = prompt("Enter new name for the chat:", "");

            const renameLineBox = document.getElementById('rename-line-box');
            const popup = document.getElementById('rename-popup');
            const overlay = document.getElementById('rename-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            const rename = document.getElementById("rename");

            chatList.item.forEach(chat => {
                //console.log("chat.id = " + chat.id);
                if (chat.id === targetChatItemId) {
                    title = chat.title;
                }
            });

            renameLineBox.setAttribute('placeholder', title);

            rename.addEventListener('click', function() {

                const rename_box = document.getElementById('rename-line-box');
                let new_title = rename_box.value;

                if (new_title.length > 0) {
                    return;
                }

                fetch('<%=build_url("admin", "network", "oasis", "rename-chat")%>', {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ id: targetChatItemId, title: new_title })
                })
                .then((response) => response.json())
                .then((data) => {
                    if (data.error) {
                        console.error("Error renaming chat:", data.error);
                        return;
                    }
                })
                .catch((error) => {
                    console.error("Request failed:", error);
                    //alert("Failed to rename chat. Please try again.");
                });

                const listItem = document.querySelector(`li[data-id="${targetChatItemId}"]`);
                const smp_listItem = document.querySelector(`li[data-id-for-smp="${targetChatItemId}"]`);
                const spanElement = listItem.querySelector("span");
                const smp_spanElement = smp_listItem.querySelector("span");
                spanElement.textContent = new_title;
                smp_spanElement.textContent = new_title;
                rename_box.value = "";

                chatList.item.forEach(chat => {
                    if (chat.id === targetChatItemId) {
                        chat.title = new_title;
                        //console.log("chat.title = " + chat.title);
                    }
                });

                closeRenamePopup();
            }, { once: true })
        }

        function handleExportAction(button, id) {
            const popup = document.getElementById('export-popup');
            const overlay = document.getElementById('export-popup-overlay');
            popup.style.display = 'block';
            overlay.style.display = 'block';

            //console.log("id = " + id);

            const json_export = document.getElementById("json-export");
            const text_export = document.getElementById("text-export");

            json_export.addEventListener('click', function() {
                //console.log("Push JSON!!");

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    raw_data = JSON.stringify(data, null, 2);

                    const blob = new Blob([raw_data], { type: "application/json" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.json`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            text_export.addEventListener('click', function() {

                let chat_data = "";

                fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({ params: id })
                })
                .then(response => response.json())
                .then(data => {

                    if (data.error) {
                        console.error("Error from server:", data.error);
                        return;
                    }

                    data.messages.forEach(message => {
                        if (message.role === 'user') {
                            chat_data += ">>> You\n";
                        } else if (message.role === 'assistant') {
                            chat_data += ">>> AI\n";
                        }

                        if ((message.role === 'user') || (message.role === 'assistant')) {
                            chat_data += message.content + "\n\n";
                        }
                    });

                    const blob = new Blob([chat_data], { type: "text/plain" });
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.href = url;
                    a.download = `chat_data_${id}.txt`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    URL.revokeObjectURL(url);

                    //console.log("Text file downloaded successfully.");
                })
                .catch(error => {
                    console.error('Error:', error);
                });

                closeExportPopup();
            });

            text_export.addEventListener('click', function() {
                //console.log("Push TEXT!!");
                closeExportPopup();
            });
        }
    });

    function showTitlePopup(title) {
        if (title) {
            const popup = document.createElement('div');
            popup.textContent = title;
            popup.classList.add('popup');

            document.body.appendChild(popup);

            setTimeout(() => {
                popup.classList.add('show');
            }, 10);

            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('hide');
                setTimeout(() => {
                    popup.remove();
                }, 500);
            }, 5000);
        } else {
            console.error('Title not found in JSON data.');
        }
    }

    let targetChatId = "";
    let message_outputing = false;
    const resourcePath = '<%= resource %>';
    const iconPath = `${resourcePath}/luci-app-oasis/openwrt.png`;

    document.getElementById('send-button').addEventListener('click', async function() {

        if (message_outputing) {
            return;
        }

        message_outputing = true;

        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();

        if (!messageText) {
            return;
        }

        const messageContainer = document.createElement('div');
        messageContainer.className = 'message sent';

        const messageTextContainer = document.createElement('div');
        messageTextContainer.className = 'message-text';
        messageTextContainer.textContent = messageText;

        messageContainer.appendChild(messageTextContainer);

        document.querySelector('.chat-messages').appendChild(messageContainer);
        messageInput.value = '';
        messageInput.focus();

        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const receivedMessageContainer = document.createElement('div');
        receivedMessageContainer.className = 'message received';

        const receivedIconContainer = document.createElement('div');
        receivedIconContainer.className = 'icon';
        receivedIconContainer.style.backgroundImage = `url(${iconPath})`;

        const receivedMessageTextContainer = document.createElement('div');
        receivedMessageTextContainer.className = 'message-text';
    
        receivedMessageContainer.appendChild(receivedIconContainer);
        receivedMessageContainer.appendChild(receivedMessageTextContainer);

        document.querySelector('.chat-messages').appendChild(receivedMessageContainer);
        
        chatMessages.scrollTop = chatMessages.scrollHeight;

        send_message(receivedMessageTextContainer, messageText);
    });

    function show_chat_popup(jsonResponse) {
        message_outputing = false;
        targetChatId = jsonResponse.id;
        //console.log("targetChatId = " + targetChatId);
        showTitlePopup(jsonResponse.title);
        
        // New Chat List Item
        const chatListContainer = document.getElementById("chat-list");
        const smpChatListContainer = document.getElementById("smp-chat-item-dropdown")
        const li = document.createElement("li");
        const smp_li = document.createElement("li")

        li.setAttribute("data-id", targetChatId);

        smp_li.setAttribute("data-id-for-smp", targetChatId);
        smp_li.classList.add("smp-dropdown-item");

        const span = document.createElement("span");
        span.textContent = jsonResponse.title;

        const smp_span = document.createElement("span");
        smp_span.textContent = jsonResponse.title;

        const menuContainer = document.createElement("div");
        menuContainer.classList.add("oasis-hamburger-menu");

        const smp_menuContainer = document.createElement("div");
        smp_menuContainer.classList.add("oasis-hamburger-menu");

        const menuButton = document.createElement("button");
        menuButton.classList.add("oasis-menu-btn");
        menuButton.textContent = "⋮";
        menuContainer.appendChild(menuButton);

        li.appendChild(span);
        li.appendChild(menuContainer);
        chatListContainer.appendChild(li);

        const smp_menuButton = document.createElement("button");
        smp_menuButton.classList.add("oasis-menu-btn");
        smp_menuButton.textContent = "⋮";
        smp_menuContainer.appendChild(smp_menuButton);
        smp_li.appendChild(smp_span);
        smp_li.appendChild(smp_menuContainer);
        smpChatListContainer.appendChild(smp_li);

        li.addEventListener('click', function (event) {
            //console.log("click 1");
            targetChatItemId = event.target.closest("li").getAttribute("data-id");
            if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                return;
            }

            handleChatItemClick(targetChatItemId);
        });

        smp_li.addEventListener('click', function (event) {
            //console.log("click 2");
            targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");

            handleChatItemClick(targetChatItemId);

            smpChatListContainer.style.display = "none";
        });

        menuButton.addEventListener("click", function (event) {
            //console.log("click 3");
            const dropdown = document.getElementById("oasis-dropdown");
            targetChatItemId = event.target.closest("li").getAttribute("data-id");
            event.stopPropagation();
            const rect = this.getBoundingClientRect();
            dropdown.style.top = `${rect.bottom + window.scrollY}px`;
            dropdown.style.left = `${rect.left + window.scrollX}px`;
            dropdown.style.display = "block";
        });

        smp_menuButton.addEventListener("click", function (event) {
            //console.log("click 4");
            const dropdown = document.getElementById("oasis-dropdown");
            targetChatItemId = event.target.closest("li").getAttribute("data-id-for-smp");
            event.stopPropagation();
            dropdown.style.display = "block";
        });
    }

    function show_notify_popup() {
        const systemMessage = document.createElement("div");
        systemMessage.classList.add("message", "oasis-system");

        const messageTextDiv = document.createElement("div");
        messageTextDiv.className = "message-text";

        const textNode = document.createTextNode("OpenWrt UCI Commands");
        messageTextDiv.appendChild(textNode);

        const preElement = document.createElement("pre");
        preElement.className = "console-command-color";
        preElement.textContent = `uci set network.lan.ipaddr=192.168.1.1\nuci set network.lan.proto=static`;
        messageTextDiv.appendChild(preElement);

        const popupButtonsDiv = document.createElement("div");
        popupButtonsDiv.className = "uci-popup-buttons";

        const popupDiv = document.createElement("div");
        popupDiv.className = "uci-popup";

        const askButton = document.createElement("button");
        askButton.id = "ask";
        askButton.textContent = "Ask";
        popupDiv.appendChild(askButton);

        const applyButton = document.createElement("button");
        applyButton.id = "apply";
        applyButton.textContent = "Apply";
        popupDiv.appendChild(applyButton);

        const cancelButton = document.createElement("button");
        cancelButton.id = "uci-cancel";
        cancelButton.textContent = "Cancel";
        popupDiv.appendChild(cancelButton);

        popupButtonsDiv.appendChild(popupDiv);
        messageTextDiv.appendChild(popupButtonsDiv);
        systemMessage.appendChild(messageTextDiv);
        //chatMessages.appendChild(systemMessage);
    }

    async function send_message(receivedMessageTextContainer, messageText) {
        activeConversation = true;
        const baseUrl = `${window.location.protocol}//${window.location.hostname}`;
        const dropdown = document.getElementById("oasis-dropdown");
        let fullMessage = '';
        let finalResponse = '';

        try {
            const response = await fetch(`${baseUrl}/cgi-bin/oasis`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cmd: "chat",
                    id: targetChatId,
                    message: messageText,
                })
            });

            if (response.ok) {
                const chatMessages = document.querySelector('.chat-messages');
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    const chunk = decoder.decode(value, { stream: true });
                    buffer += chunk;
                    //console.log(chunk.trim());

                    const parts = buffer.split(/(?<=})\s*(?={)/g);
                    buffer = parts.pop();

                    for (const part of parts) {
                        try {

                            const jsonResponse = JSON.parse(part.trim());

                            if (jsonResponse.message && jsonResponse.message.content) {
                                fullMessage += jsonResponse.message.content;
                                receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                            }

                            if (jsonResponse.id) {
                                show_chat_popup(jsonResponse);
                            }

                            if (jsonResponse.uci_notify) {
                                show_notify_popup();
                            }
                        } catch (e) {
                            console.error('JSON Parse Error:', e, part.trim());
                        }
                    }

                    if (buffer.trim()) {
                        try {
                            //console.log("final = " + buffer.trim());
                            finalResponse = JSON.parse(buffer.trim());

                            if (finalResponse.id) {
                                show_chat_popup(finalResponse);
                            }

                            if (finalResponse.uci_notify) {
                                show_notify_popup();
                            }
                        } catch (e) {
                            console.error('Final JSON Parse Error:', e, buffer.trim());
                        }
                    }
                }

                if (finalResponse.message && finalResponse.message.content) {
                    //console.log("final message = " + finalResponse.message.content);
                    fullMessage += finalResponse.message.content;
                    receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }

                message_outputing = false;
                activeConversation = false;
                receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage.trim());
            } else {
                console.error('Error:', response.statusText);
            }
        } catch (error) {
            console.error('Request failed', error);
        }
        message_outputing = false;
        activeConversation = false;
    }

    function handleChatItemClick(chatId) {

        //console.log("chat id = " + chatId);

        if (activeConversation) {
            return;
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ params: chatId })
        })
        .then(response => response.json())
        .then(data => {

            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    const messageTextDiv = document.createElement('div');

                    if (message.role === 'user') {
                        messageDiv.className = 'message sent';
                    } else if (message.role === 'assistant') {
                        messageDiv.className = 'message received';

                        const iconDiv = document.createElement('div');
                        iconDiv.className = 'icon';
                        iconDiv.style.backgroundImage = 'url("/luci-static/resources/luci-app-oasis/openwrt.png")';

                        messageDiv.appendChild(iconDiv);
                    }

                    if (message.role === 'user' || message.role === 'assistant') {
                        messageTextDiv.className = 'message-text';
                        message.content = convertMarkdownToHTML(message.content);
                        messageTextDiv.innerHTML = message.content;
                        //messageTextDiv.textContent = message.content;

                        messageDiv.appendChild(messageTextDiv);

                        chatMessagesContainer.appendChild(messageDiv);
                    }
                });
            } else {
                console.error("Unexpected data format:", data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
        targetChatId = chatId;
    }

    document.getElementById('new-button').addEventListener('click', async function() {

        if (activeConversation || message_outputing) {
            return;
        }

        targetChatId = "";

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }
    });
</script>

<%+footer%>
