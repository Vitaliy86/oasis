<%+header%>

<link rel="stylesheet" type="text/css" href="<%= resource %>/luci-app-oasis/chat.css">

<div class="oasis-container">
    <div class="chat-list-container">
        <ul id="chat-list"></ul>
    </div>

    <div class="chat-container">
        <div class="chat-messages"></div>
        <div class="chat-input">
            <textarea id="message-input" placeholder="Your Message" rows="1"></textarea>
            <button id="send-button">Send</button>
            <button id="new-button">New</button>
        </div>
    </div>

    <div class="oasis-dropdown" id="oasis-dropdown">
        <button class="oasis-menu-item" data-action="delete">Delete</button>
        <button class="oasis-menu-item" data-action="rename">Rename</button>
        <button class="oasis-menu-item" data-action="export">Export</button>
    </div>
</div>

<script>

    const chatItems = null;
    let activeConversation = false;
    let targetChatItemId = null;

    function convertMarkdownToHTML(input) {
        let html = '';
        let isCodeBlock = false;
        const lines = input.split('\n');

        for (let line of lines) {
            if (line.startsWith('```')) {
                if (!isCodeBlock) {
                    html += '<pre class="console-command-color">';
                    isCodeBlock = true;
                } else {
                    html += '</pre>';
                    isCodeBlock = false;
                }
            } else if (isCodeBlock) {
                html += escapeHTML(line) + '\n';
            } else {
                line = line.replace(/^###### (.+)$/gm, '<h6 style="color:#DCDCDC;">$1</h6>');
                line = line.replace(/^##### (.+)$/gm, '<h5 style="color:#708090;">$1</h5>');
                line = line.replace(/^#### (.+)$/gm, '<h4 style="color:#B0C4DE;">$1</h4>');
                line = line.replace(/^### (.+)$/gm, '<h3 style="color:#4682B4;">$1</h3>');
                line = line.replace(/^## (.+)$/gm, '<h2 style="color:#6495ED;">$1</h2>');
                line = line.replace(/^# (.+)$/gm, '<h1>$1</h1>');
                line = line.replace(/\*\*(.+?)\*\*/g, '<b>$1</b>');
                line = line.replace(/\*(.+?)\*/g, '<i>$1</i>');
                html += line + '<br>';
            }
        }

        return html;
    }

    function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
    }

    document.addEventListener('DOMContentLoaded', function () {
        const chatListContainer = document.getElementById("chat-list");
        const dropdown = document.getElementById("oasis-dropdown");

        fetch('<%=build_url("admin", "network", "oasis", "chat-list")%>', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if ((data.item) && (data.item.length > 0) &&  Array.isArray(data.item)) {
                data.item.forEach(chat => {
                    const li = document.createElement("li");
                    li.setAttribute("data-id", chat.id);

                    const span = document.createElement("span");
                    span.textContent = chat.title;
                    li.appendChild(span);

                    const menuContainer = document.createElement("div");
                    menuContainer.classList.add("oasis-hamburger-menu");

                    const menuButton = document.createElement("button");
                    menuButton.classList.add("oasis-menu-btn");
                    menuButton.textContent = "â‹®";

                    menuButton.addEventListener("click", function (event) {
                        targetChatItemId = event.target.closest("li").getAttribute("data-id");
                        event.stopPropagation();
                        const rect = this.getBoundingClientRect();
                        dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                        dropdown.style.left = `${rect.left + window.scrollX}px`;
                        dropdown.style.display = "block";
                    });

                    menuContainer.appendChild(menuButton);
                    li.appendChild(menuContainer);
                    chatListContainer.appendChild(li);
                });

                const chatItems = document.querySelectorAll('#chat-list li');
                chatItems.forEach(item => {
                    item.addEventListener('click', function (event) {

                        if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                            return;
                        }

                        const chatId = this.getAttribute('data-id');
                        handleChatItemClick(chatId);
                    });
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });

        document.addEventListener("click", function () {
            dropdown.style.display = 'none';
        });

        document.addEventListener("click", function (event) {
            const target = event.target;

            if (target.classList.contains("oasis-menu-item")) {
                const action = target.getAttribute("data-action");

                if (action === "delete") {
                    handleDeleteAction(target);
                } else if (action === "rename") {
                    handleRenameAction(target);
                } else if (action === "export") {
                    handleExportAction(target);
                }
            }
        });

        function handleDeleteAction(button) {

            console.log("Deleting chat with ID:", targetChatItemId);

            if (activeConversation) {
                return;
            }

            fetch('<%=build_url("admin", "network", "oasis", "delete-chat-data")%>', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({ params: targetChatItemId }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.status === "OK") {
                    console.log(`Chat ID ${targetChatItemId} deleted successfully.`);
                    const listItem = document.querySelector(`#chat-list li[data-id='${targetChatItemId}']`);
                    if (listItem) {
                        listItem.remove();

                        const chatMessagesContainer = document.querySelector('.chat-messages');

                        if (chatMessagesContainer) {
                            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
                            messages.forEach(message => message.remove());
                        }
                    } else {
                        console.error("Could not find the list item with ID:", targetChatItemId);
                    }
                } else {
                    console.error("Error deleting chat:", data.error);
                    alert("Failed to delete chat. Please try again.");
                }
            })
            .catch((error) => {
                console.error("Request failed:", error);
                alert("Failed to delete chat. Please try again.");
            });
        }

        function handleRenameAction(button) {

            console.log("Renaming chat with ID:", targetChatItemId);
            const newName = prompt("Enter new name for the chat:", "");

            if (newName) {
                fetch('<%=build_url("admin", "network", "oasis", "rename-chat")%>', {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ id: targetChatItemId, new_name: newName }),
                })
                .then((response) => response.json())
                .then((data) => {
                    if (data.success) {
                        console.log(`Chat ID ${targetChatItemId} renamed successfully.`);
                        const chatTitle = button.closest("li").querySelector("span");
                        chatTitle.textContent = newName;
                    } else {
                        console.error("Error renaming chat:", data.error);
                        alert("Failed to rename chat. Please try again.");
                    }
                })
                .catch((error) => {
                    console.error("Request failed:", error);
                    alert("Failed to rename chat. Please try again.");
                });
            }
        }

        function handleExportAction(button) {
            console.log("Exporting chat with ID:", targetChatItemId);

            fetch('<%=build_url("admin", "network", "oasis", "export-chat")%>', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ id: targetChatItemId }),
            })
            .then((response) => response.json())
            .then((data) => {
                if (data.success && data.exported_url) {
                    console.log(`Chat ID ${targetChatItemId} exported successfully.`);
                    const link = document.createElement("a");
                    link.href = data.exported_url;
                    link.download = `chat_${targetChatItemId}.json`;
                    link.click();
                } else {
                    console.error("Error exporting chat:", data.error);
                    alert("Failed to export chat. Please try again.");
                }
            })
            .catch((error) => {
                console.error("Request failed:", error);
                alert("Failed to export chat. Please try again.");
            });
        }
    });

    function showTitlePopup(title) {
        if (title) {
            const popup = document.createElement('div');
            popup.textContent = title;
            popup.classList.add('popup');

            document.body.appendChild(popup);

            setTimeout(() => {
                popup.classList.add('show');
            }, 10);

            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('hide');
                setTimeout(() => {
                    popup.remove();
                }, 500);
            }, 5000);
        } else {
            console.error('Title not found in JSON data.');
        }
    }

    let targetChatId = "";
    let message_outputing = false;
    const resourcePath = '<%= resource %>';
    const iconPath = `${resourcePath}/luci-app-oasis/openwrt.png`;

    document.getElementById('send-button').addEventListener('click', async function() {

        if (message_outputing) {
            return;
        }

        message_outputing = true;

        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();

        if (!messageText) {
            return;
        }

        const messageContainer = document.createElement('div');
        messageContainer.className = 'message sent';

        const messageTextContainer = document.createElement('div');
        messageTextContainer.className = 'message-text';
        messageTextContainer.textContent = messageText;

        messageContainer.appendChild(messageTextContainer);

        document.querySelector('.chat-messages').appendChild(messageContainer);
        messageInput.value = '';
        messageInput.focus();

        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const receivedMessageContainer = document.createElement('div');
        receivedMessageContainer.className = 'message received';

        const receivedIconContainer = document.createElement('div');
        receivedIconContainer.className = 'icon';
        receivedIconContainer.style.backgroundImage = `url(${iconPath})`;

        const receivedMessageTextContainer = document.createElement('div');
        receivedMessageTextContainer.className = 'message-text';
    
        receivedMessageContainer.appendChild(receivedIconContainer);
        receivedMessageContainer.appendChild(receivedMessageTextContainer);

        document.querySelector('.chat-messages').appendChild(receivedMessageContainer);
        
        chatMessages.scrollTop = chatMessages.scrollHeight;

        send_message(receivedMessageTextContainer, messageText);
    });

    async function send_message(receivedMessageTextContainer, messageText) {

        //console.log('Resource Path:', resourcePath);
        //console.log('Icon Path:', iconPath);
        activeConversation = true;
        const baseUrl = `${window.location.protocol}//${window.location.hostname}`;
        const dropdown = document.getElementById("oasis-dropdown");

        //console.log('baseUrl:', baseUrl);

        try {
            const response = await fetch(`${baseUrl}/cgi-bin/oasis`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cmd: "chat",
                    id: targetChatId,
                    message: messageText,
                })
            });

            if (response.ok) {
                const chatMessages = document.querySelector('.chat-messages');
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let fullMessage = '';

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    const chunk = decoder.decode(value, { stream: true });
                    //console.log(chunk)

                    try {
                        const jsonResponse = JSON.parse(chunk.trim());

                        if (jsonResponse.message && jsonResponse.message.content) {
                            fullMessage += jsonResponse.message.content;
                            receivedMessageTextContainer.innerHTML = convertMarkdownToHTML(fullMessage);
                            //receivedMessageTextContainer.textContent = convertStaticCodeBlocks(receivedMessageTextContainer.textContent);
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }

                        if (jsonResponse.id) {
                            message_outputing = false;
                            targetChatId = jsonResponse.id;
                            showTitlePopup(jsonResponse.title);
                            
                            // New Chat List Item
                            const chatListContainer = document.getElementById("chat-list");
                            const li = document.createElement("li");
                            li.setAttribute("data-id", targetChatId);

                            const span = document.createElement("span");
                            span.textContent = jsonResponse.title;

                            const menuContainer = document.createElement("div");

                            menuContainer.classList.add("oasis-hamburger-menu");

                            const menuButton = document.createElement("button");
                            menuButton.classList.add("oasis-menu-btn");
                            menuButton.textContent = "â‹®";
                            menuContainer.appendChild(menuButton);
                            li.appendChild(span);
                            li.appendChild(menuContainer);
                            chatListContainer.appendChild(li);

                            li.addEventListener('click', function (event) {
                                targetChatItemId = event.target.closest("li").getAttribute("data-id");

                                if (event.target.closest(".oasis-menu-btn") || event.target.closest(".oasis-dropdown")) {
                                    return;
                                }

                                handleChatItemClick(targetChatItemId);
                            });

                            menuButton.addEventListener("click", function (event) {
                                targetChatItemId = event.target.closest("li").getAttribute("data-id");
                                event.stopPropagation();
                                const rect = this.getBoundingClientRect();
                                dropdown.style.top = `${rect.bottom + window.scrollY}px`;
                                dropdown.style.left = `${rect.left + window.scrollX}px`;
                                dropdown.style.display = "block";
                            });
                        }
                    } catch (e) {
                        // Ignore JSON parsing errors and continue buffering
                    }
                }
                message_outputing = false;
                receivedMessageTextContainer.InnerHtml = convertMarkdownToHTML(fullMessage.trim());
            } else {
                console.error('Error:', response.statusText);
            }
        } catch (error) {
            console.error('Request failed', error);
        }
        activeConversation = false;
    }

    function handleChatItemClick(chatId) {

        console.log("chat id = " + chatId);

        if (activeConversation) {
            return;
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ params: chatId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    const messageTextDiv = document.createElement('div');

                    if (message.role === 'user') {
                        messageDiv.className = 'message sent';
                    } else if (message.role === 'assistant') {
                        messageDiv.className = 'message received';

                        const iconDiv = document.createElement('div');
                        iconDiv.className = 'icon';
                        iconDiv.style.backgroundImage = 'url("/luci-static/resources/luci-app-oasis/openwrt.png")';

                        messageDiv.appendChild(iconDiv);
                    }

                    messageTextDiv.className = 'message-text';
                    message.content = convertMarkdownToHTML(message.content);
                    messageTextDiv.innerHTML = message.content;
                    //messageTextDiv.textContent = message.content;

                    messageDiv.appendChild(messageTextDiv);

                    chatMessagesContainer.appendChild(messageDiv);
                });
            } else {
                console.error("Unexpected data format:", data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
        targetChatId = chatId;
    }

    document.getElementById('new-button').addEventListener('click', async function() {

        if (activeConversation) {
            return;
        }

        if (message_outputing) {
            return;
        }

        targetChatId = "";

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        const messageInput = document.getElementById('message-input');

        messageInput.addEventListener('input', function () {
            const lineBreaks = (this.value.match(/\n/g) || []).length;
            const lineHeight = parseInt(window.getComputedStyle(this).lineHeight);
            const newHeight = Math.min(Math.max((lineBreaks + 1), 3) * lineHeight, lineHeight * 5);
            this.style.height = `${newHeight}rem`;
            if (newHeight === lineHeight * 5) {
                this.style.overflowY = 'auto';
            } else {
                this.style.overflowY = 'hidden';
            }
        });
    });

</script>

<%+footer%>
