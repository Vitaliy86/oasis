<%+header%>

<link rel="stylesheet" type="text/css" href="<%= resource %>/luci-app-oasis/chat.css">

<div class="oasis-container">
    <div class="chat-list-container">
        <ul id="chat-list"></ul>
    </div>

    <div class="chat-container">
        <div class="chat-messages"></div>
        <div class="chat-input">
            <input type="text" id="message-input" placeholder="Your Message">
            <button id="send-button">Send</button>
        </div>
    </div>
</div>

<script>

    const chatItems = null;
    let activeConversation = false;

    document.addEventListener('DOMContentLoaded', function () {
        const chatListContainer = document.getElementById("chat-list");

        fetch('<%=build_url("admin", "network", "oasis", "chat-list")%>', {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.item && Array.isArray(data.item)) {
                data.item.forEach(chat => {
                    const li = document.createElement("li");
                    li.setAttribute("data-id", chat.id);

                    const span = document.createElement("span");
                    span.textContent = chat.title;

                    li.appendChild(span);

                    const menuContainer = document.createElement("div");
                    menuContainer.classList.add("oasis-hamburger-menu");

                    // menu button
                    const menuButton = document.createElement("button");
                    menuButton.classList.add("oasis-menu-btn");
                    menuButton.textContent = "â‹®";

                    // drop button menu
                    const dropdown = document.createElement("div");
                    dropdown.classList.add("oasis-dropdown");

                    const deleteButton = document.createElement("button");
                    deleteButton.classList.add("oasis-menu-item");
                    deleteButton.setAttribute("data-action", "delete");
                    deleteButton.textContent = "Delete";

                    const renameButton = document.createElement("button");
                    renameButton.classList.add("oasis-menu-item");
                    renameButton.setAttribute("data-action", "rename");
                    renameButton.textContent = "Rename";

                    const exportButton = document.createElement("button");
                    exportButton.classList.add("oasis-menu-item");
                    exportButton.setAttribute("data-action", "export");
                    exportButton.textContent = "Export";

                    dropdown.appendChild(deleteButton);
                    dropdown.appendChild(renameButton);
                    dropdown.appendChild(exportButton);

                    menuContainer.appendChild(menuButton);
                    menuContainer.appendChild(dropdown);

                    li.appendChild(menuContainer);

                    chatListContainer.appendChild(li);
                });

                const chatItems = document.querySelectorAll('#chat-list li');
                chatItems.forEach(item => {
                    item.addEventListener('click', function () {
                        const chatId = this.getAttribute('data-id');
                        handleChatItemClick(chatId);
                    });
                });
            } else {
                console.error("Unexpected data format:", data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            resultDiv.innerHTML = 'Error: ' + error;
        });
    });

    function showTitlePopup(title) {
        if (title) {
            const popup = document.createElement('div');
            popup.textContent = title;
            popup.classList.add('popup');

            document.body.appendChild(popup);

            setTimeout(() => {
                popup.classList.add('show');
            }, 10);

            setTimeout(() => {
                popup.classList.remove('show');
                popup.classList.add('hide');
                setTimeout(() => {
                    popup.remove();
                }, 500);
            }, 5000);
        } else {
            console.error('Title not found in JSON data.');
        }
    }

    let targetChatId = "";
    let message_outputing = false;
    const resourcePath = '<%= resource %>';
    const iconPath = `${resourcePath}/luci-app-oasis/openwrt.png`;

    document.getElementById('send-button').addEventListener('click', async function() {

        if (message_outputing) {
            return;
        }

        message_outputing = true;

        const messageInput = document.getElementById('message-input');
        const messageText = messageInput.value.trim();

        if (!messageText) {
            return;
        }

        const messageContainer = document.createElement('div');
        messageContainer.className = 'message sent';

        const messageTextContainer = document.createElement('div');
        messageTextContainer.className = 'message-text';
        messageTextContainer.textContent = messageText;

        messageContainer.appendChild(messageTextContainer);

        document.querySelector('.chat-messages').appendChild(messageContainer);
        messageInput.value = '';
        messageInput.focus();

        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const receivedMessageContainer = document.createElement('div');
        receivedMessageContainer.className = 'message received';

        const receivedIconContainer = document.createElement('div');
        receivedIconContainer.className = 'icon';
        receivedIconContainer.style.backgroundImage = `url(${iconPath})`;

        const receivedMessageTextContainer = document.createElement('div');
        receivedMessageTextContainer.className = 'message-text';

        receivedMessageContainer.appendChild(receivedIconContainer);
        receivedMessageContainer.appendChild(receivedMessageTextContainer);

        document.querySelector('.chat-messages').appendChild(receivedMessageContainer);

        chatMessages.scrollTop = chatMessages.scrollHeight;

        send_message(receivedMessageTextContainer, messageText);
    });

    async function send_message(receivedMessageTextContainer, messageText) {

        //console.log('Resource Path:', resourcePath);
        //console.log('Icon Path:', iconPath);
        activeConversation = true;
        const baseUrl = `${window.location.protocol}//${window.location.hostname}`;

        //console.log('baseUrl:', baseUrl);

        try {
            const response = await fetch(`${baseUrl}/cgi-bin/oasis`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    cmd: "chat",
                    id: targetChatId,
                    message: messageText,
                })
            });

            if (response.ok) {
                const chatMessages = document.querySelector('.chat-messages');
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let fullMessage = '';

                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    const chunk = decoder.decode(value, { stream: true });
                    //console.log(chunk)

                    try {
                        const jsonResponse = JSON.parse(chunk.trim());

                        if (jsonResponse.message && jsonResponse.message.content) {
                            fullMessage += jsonResponse.message.content;
                            receivedMessageTextContainer.textContent += jsonResponse.message.content;
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                        }

                        if (jsonResponse.id) {
                            message_outputing = false;
                            targetChatId = jsonResponse.id;
                            showTitlePopup(jsonResponse.title);
                            
                            // New Chat List Item
                            const chatListContainer = document.getElementById("chat-list");
                            const li = document.createElement("li");
                            li.setAttribute("data-id", jsonResponse.id);

                            const span = document.createElement("span");
                            span.textContent = jsonResponse.title;

                            li.appendChild(span);
                            chatListContainer.appendChild(li);
                        }
                    } catch (e) {
                        // Ignore JSON parsing errors and continue buffering
                    }
                }
                message_outputing = false;
                receivedMessageTextContainer.textContent = fullMessage.trim();
            } else {
                console.error('Error:', response.statusText);
            }
        } catch (error) {
            console.error('Request failed', error);
        }
        activeConversation = false;
    }

    function handleChatItemClick(chatId) {

        if (activeConversation) {
            return;
        }

        const chatMessagesContainer = document.querySelector('.chat-messages');

        if (chatMessagesContainer) {
            const messages = chatMessagesContainer.querySelectorAll('.message.sent, .message.received');
            messages.forEach(message => message.remove());
        }

        fetch('<%=build_url("admin", "network", "oasis", "load-chat-data")%>', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({ params: chatId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error("Error from server:", data.error);
                return;
            }

            if (data.messages && Array.isArray(data.messages)) {
                data.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    const messageTextDiv = document.createElement('div');

                    if (message.role === 'user') {
                        messageDiv.className = 'message sent';
                    } else if (message.role === 'assistant') {
                        messageDiv.className = 'message received';

                        const iconDiv = document.createElement('div');
                        iconDiv.className = 'icon';
                        iconDiv.style.backgroundImage = 'url("/luci-static/resources/luci-app-oasis/openwrt.png")';

                        messageDiv.appendChild(iconDiv);
                    }

                    messageTextDiv.className = 'message-text';
                    messageTextDiv.textContent = message.content;

                    messageDiv.appendChild(messageTextDiv);

                    chatMessagesContainer.appendChild(messageDiv);
                });
            } else {
                console.error("Unexpected data format:", data);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
        targetChatId = chatId;
    }

</script>

<%+footer%>
