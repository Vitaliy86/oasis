#!/usr/bin/env lua
local jsonc = require("luci.jsonc")
local uci = require("luci.model.uci").cursor()
local oasis = require("oasis.chat.ctrl")
local filter = require("oasis.chat.filter")

local request_method = os.getenv("REQUEST_METHOD")

print("Content-Type: text/plain\n")

-- os.execute("echo \"oasis cgi called\" >> /tmp/oasis.log")

if request_method == "POST" then
    -- os.execute("echo POST >> /tmp/oasis.log")
    local content_length = tonumber(os.getenv("CONTENT_LENGTH") or 0)
    local post_data = io.read(content_length)
    -- os.execute("echo " .. content_length .. " >> /tmp/oasis.log")
    -- os.execute("echo " .. post_data.message .. " >> /tmp/oasis.log")

    local json_tbl = jsonc.parse(post_data)

    -- for k, v in pairs(json_tbl) do
    --     os.execute("key:" .. k .. ", value = " .. v .. " >> /tmp/oasis.log")
    -- end

    if not json_tbl then
        io.write("Message Format Error.")
        return
    end

    local enable = uci:get_bool("oasis", "assist", "enable")
    local new_chat_info, plain_text_ai_message = oasis.output(json_tbl)
    local uci_cmd_notification = {}
    if enable and plain_text_ai_message then
        uci_cmd_notification.uci_list = filter.uci_cmd_filter(plain_text_ai_message)
        uci_cmd_notification.uci_notify = filter.check_uci_list_exist(uci_cmd_notification)
        if uci_cmd_notification.uci_notify then
            uci_cmd_notification = jsonc.stringify(uci_cmd_notification, false)
            -- os.execute("echo \"" .. uci_cmd_notification .. "\" >> /tmp/oasis-notify.log")
            io.write(uci_cmd_notification)
            io.flush()
            os.execute("sleep 1")
        end
        -- for debug
        -- else
        --     os.execute("echo \"no uci list\" >> /tmp/oasis.log")
        -- end
    end

    if #new_chat_info > 0 then
        --os.execute("echo \"" .. new_chat_info .. "\" >> /tmp/oasis.log")
        io.write(new_chat_info)
    end
else
    io.write("This script only handles POST requests.")
end
