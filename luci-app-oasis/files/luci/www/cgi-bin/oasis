#!/usr/bin/env lua
local jsonc = require("luci.jsonc")
local uci = require("luci.model.uci").cursor()
local oasis = require("ai_chat_ctrl")

local request_method = os.getenv("REQUEST_METHOD")

function classify_param(classified_param_tbl, param_chunk)

    if type(param_chunk) ~= "string" then
        return
    end

    local config, section, option, value = param_chunk:match("([^%.]+)%.([^%.]+)%.([^=]+)=(.+)")

    if config and section and option and value then
        classified_param_tbl.class = {config = config, section = section, option = option, value = value}
    else
        config, section, value = param_chunk:match("([^%.]+)%.([^=]+)=(.+)")
        if config and section and value then
            classified_param_tbl.class = {config = config, section = section, value = value}
        else
            config, section = param_chunk:match("([^%.]+)%.([^%.]+)")
            if config and section then
                classified_param_tbl.class = {config = config, section = section}
            else
                config = param_chunk:match("([^%.]+)")
                if config then
                    classified_param_tbl.class = {config = config}
                end
            end
        end
    end
end

function extract_code_blocks(text)
	local code_blocks = {}
	local pattern = "```(.-)```"

	for code in text:gmatch(pattern) do
		table.insert(code_blocks, code)
	end

	return code_blocks
end

function split_lines(code_block)
	local lines = {}
	for line in code_block:gmatch("[^\r\n]+") do
		table.insert(lines, line)
	end

	return lines
end

function check_uci_cmd_candidate(lines)

	local uci_list = {
		set      = {},
		add      = {},
		add_list = {},
		commit   = {},
		delete   = {},
		reorder  = {},
	}

	--local pattern = "^uci (set|add|add_list|delete|commit) .+"
	local patterns = {}
	patterns.set = "^uci set (.+)"
	patterns.add = "^uci add (.+)"
	patterns.add_list = "^uci add_list (.+)"
	patterns.commit = "^uci commit (.*)"
	patterns.delete = "^uci delete (.+)"
	patterns.delete = "^uci reorder (.+)"

	for _, line in ipairs(lines) do
		for cmd, pattern in pairs(patterns) do
			local param = line:match(pattern)
			if param then
				param:gsub("%s+", "")
				uci_list[cmd][#uci_list[cmd] + 1] = {
					param = param
				}
				break
			end
		end
	end

	return uci_list
end

function uci_cmd_filter(message)

	local uci_list = nil
	local code_blocks = extract_code_blocks(message)

	for i, code in ipairs(code_blocks) do
		local lines = split_lines(code)
		uci_list = check_uci_cmd_candidate(lines)
		for _, target_cmd_list in pairs(uci_list) do
			for _, target in ipairs(target_cmd_list) do
				for key, param in pairs(target) do
					classify_param(target, param)
				end
			end
		end
	end

	return uci_list
end

print("Content-Type: text/plain\n")

-- os.execute("echo \"oasis cgi called\" >> /tmp/oasis.log")

if request_method == "POST" then
    -- os.execute("echo POST >> /tmp/oasis.log")
    local content_length = tonumber(os.getenv("CONTENT_LENGTH") or 0)
    local post_data = io.read(content_length)
    -- os.execute("echo " .. content_length .. " >> /tmp/oasis.log")
    -- os.execute("echo " .. post_data.message .. " >> /tmp/oasis.log")

    local json_tbl = jsonc.parse(post_data)

    -- for k, v in pairs(json_tbl) do
    --     os.execute("key:" .. k .. ", value = " .. v .. " >> /tmp/oasis.log")
    -- end

    if not json_tbl then
        io.write("Message Format Error.")
        return
    end

    oasis.output(json_tbl)
	
else
    io.write("This script only handles POST requests.")
end
