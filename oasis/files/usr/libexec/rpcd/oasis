#!/usr/bin/env lua

local jsonc = require("luci.jsonc")
local uci = require("luci.model.uci").cursor()
local common = require("oasis.common")

local methods = {

    config = {
        call = function()
            local r = {}
            local storage = uci:get_all("oasis", "storage")
            r.result = jsonc.stringify(storage)
            return r
        end
    },

    load_sysmsg = {
        args = { path = "a_string"},

        call = function(args)
            local r = {}

            local sysrole = common.load_conf_file(args.path)

            if not sysrole then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            r.result = jsonc.stringify(sysrole)
            return r
        end
    },

    add_sysmsg = {
        args = { path = "a_string", title = "a_string", message = "a_string"},

        call = function(args)
            local r = {}

            local data = common.load_conf_file(args.path)

            local sysmsg_key_suffix
            for sysmsg_key, _ in pairs(data) do
                sysmsg_key_suffix = sysmsg_key:match("custom_(%d+)")
            end

            if not sysmsg_key_suffix then
                sysmsg_key_suffix = 0
            end

            local new_sysmsg_key = "custom_" .. (sysmsg_key_suffix + 1)

            os.execute("echo " .. new_sysmsg_key .. " >> /tmp/oasis-rpcd.log")

            data[new_sysmsg_key] = {}
            data[new_sysmsg_key].title = args.title
            data[new_sysmsg_key].chat = args.message

            local is_update = common.update_conf_file(args.path, data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok, new_sysmsg_key = new_sysmsg_key })

            return r
        end
    },

    update_sysmsg = {
        args = { path = "a_string", target = "a_string", title = "a_string", message = "a_string"},

        call = function(args)
            local r = {}

            local data = common.load_conf_file(args.path)

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            data[args.target].title = args.title
            data[args.target].chat = args.message

            local is_update = common.update_conf_file(args.path, data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })

            return r
        end
    },

    delete_sysmsg = {
        args = { path = "a_string", target = "a_string" },

        call = function(args)
            local r = {}

            local data = common.load_conf_file(args.path)

            if not data then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            data[args.target].title = nil
            data[args.target].chat = nil

            local is_update = common.update_conf_file(args.path, data)

            if not is_update then
                r.result = jsonc.stringify({ status = common.status.error })
            end

            r.result = jsonc.stringify({ status = common.status.ok })

            return r
        end
    },

    -- confirm temporary setting
    confirm = {
        call = function()
            local r = {}
            local is_temporary_setting = uci:get_bool("oasis", "backup", "enable")

            if not is_temporary_setting then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local file = io.open("/etc/oasis/backup/uci_list.json", "r")
            local uci_list_json = file:read("*a")
            file:close()

            if not uci_list_json then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            r.result = jsonc.stringify({ status = common.status.ok, uci_list = uci_list_json})
            return r
        end
    },
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end
