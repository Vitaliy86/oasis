#!/usr/bin/env lua

local sys = require("luci.sys")
local jsonc = require("luci.jsonc")
local uci = require("luci.model.uci").cursor()
local common = require("oasis.common")

local debug_log = function(log)
    sys.exec("echo " .. log .. " >> /tmp/oasis.log")
end

local read_chat_data = function(file_path)

    -- debug_log(file_path)

    local file = io.open(file_path, "r")

    if not file then
        return ""
    end

    local chat_data = file:read("*a")
    file:close()

    -- debug_log(chat_data)

    return chat_data
end

local write_chat_data = function(file_path, str)

    local file = io.open(file_path, "w")

    if not file then
        return false
    end

    file:write(str)
    file:close()

    return true
end

local methods = {

    list = {
        call = function()
            local r = {}
            local chat_list = {}
            chat_list.item = {}

            uci:foreach("oasis", "chat", function(info)
                chat_list.item[#chat_list.item + 1] = {}
                chat_list.item[#chat_list.item].id = info.id or "unknown"
                chat_list.item[#chat_list.item].title = info.title or "--"
            end)

            r.result = jsonc.stringify(chat_list)

            return r
        end
    },

    load = {
        args = { id = "a_string" },

        call = function(args)
            local r = {}
            local conf = common.get_oasis_conf()
            local file_name = conf.prefix .. args.id
            local is_search = common.search_chat_id(args.id)

            if not is_search then
                -- debug_log("not found")
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local full_file_path = common.normalize_path(conf.path) .. file_name
            local chat_data = read_chat_data(full_file_path)

            if #chat_data == 0 then
                -- debug_log("error")
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            r.result = chat_data

            return r
        end
    },

    create = {
        args = { role1 = "a_string", content1 = "a_string", role2 = "a_string", content2 = "a_string", role3 = "a_string", content3 = "a_string" },

        call = function(args)
            local r = {}

            -- debug_log(conf.path)
            -- sys.exec("mkdir -p " .. conf.path)

            local id = common.generate_chat_id()

            if #id == 0 then
                -- debug_log("hello")
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local conf = common.get_oasis_conf()
            -- debug_log("get_oasis_conf")
            local file_name = conf.prefix .. id
            local full_file_path = common.normalize_path(conf.path) .. file_name
            common.touch(full_file_path)

            local chat_json_tbl = {}
            chat_json_tbl.messages = {}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role1, content = args.content1}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role2, content = args.content2}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role3, content = args.content3}

            local chat_json_str = jsonc.stringify(chat_json_tbl, false)

            write_chat_data(full_file_path, chat_json_str)

            local unnamed_section = uci:add("oasis", "chat")

            uci:set("oasis", unnamed_section, "id", id)
            uci:commit("oasis")

            r.result = jsonc.stringify({ status = common.status.ok , id = id})
            return r
        end
    },

    append = {
        args = {
            id = "a_string",
            role1 = "a_string", content1 = "a_string",
            role2 = "a_string", content2 = "a_string"
        },

        call = function(args)
            local r = {}
            local is_same_id = common.search_chat_id(args.id)

            if not is_same_id then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local conf = common.get_oasis_conf()
            local file_name = conf.prefix .. args.id
            local full_file_path = common.normalize_path(conf.path) .. file_name

            -- debug_log(full_file_path)

            local file = io.open(full_file_path, "r")

            if not file then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            local chat_data = file:read("*a")
            file:close()

            -- debug_log("[1]: " .. chat_data)

            local chat_json_tbl = jsonc.parse(chat_data)
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role1, content = args.content1}
            chat_json_tbl.messages[#chat_json_tbl.messages + 1] = {role = args.role2, content = args.content2}

            local chat_json_str = jsonc.stringify(chat_json_tbl, false)

            -- debug_log(chat_json_str)

            file = io.open(full_file_path, "w")

            if not file then
                -- debug_log(full_file_path)
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            file:write(chat_json_str)
            file:close()

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },

    delete = {
        args = { id = "a_string" },

        call = function(args)
            local r = {}
            local unnamed_section = ""

            uci:foreach("oasis", "chat", function(info)
                if args.id == info.id then
                    unnamed_section = info[".name"]
                end
            end)

            if #unnamed_section == 0 then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            local conf = common.get_oasis_conf()
            local file_name = conf.prefix .. args.id
            local full_file_path = common.normalize_path(conf.path) .. file_name
            local result = os.remove(full_file_path)

            -- debug_log(full_file_path)

            if not result then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            uci:delete("oasis", unnamed_section)
            uci:commit("oasis")

            r.result = jsonc.stringify({ status = common.status.ok })
            return r
        end
    },
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end
