#!/usr/bin/env lua

local uci       = require("luci.model.uci").cursor()
local jsonc     = require("luci.jsonc")
local transfer  = require("oasis.chat.transfer")
local common    = require("oasis.common")
local misc      = require("oasis.chat.misc")
local datactrl  = require("oasis.chat.datactrl")
local debug     = require("oasis.chat.debug")

local load_chat_data = function(file_path)

    -- debug.log("load_chat_data.log", file_path)

    local file = io.open(file_path, "r")

    if not file then
        return ""
    end

    local chat_data = file:read("*a")
    file:close()

    -- debug.dump("load_chat_data.log", chat_data)

    return jsonc.parse(chat_data)
end

local save_chat_title = function(id, title)

    local unnamed_section = common.get_target_id_section(id)

    if #unnamed_section == 0 then
        return false
    end

    uci:set(common.db.uci.cfg, unnamed_section, "title", title)
    uci:commit(common.db.uci.cfg)

    return true
end

local methods = {

    auto_set = {
        args = { id = "a_string" },

        call = function(args)
            local r = {}

            local cfg = datactrl.get_ai_service_cfg(nil, {with_storage = true})
            local file_name = cfg.prefix .. args.id
            local file_path = misc.normalize_path(cfg.path) .. file_name

            local rpath = uci:get(common.db.uci.cfg, common.db.uci.sect.role, "path")
            local sysrole = common.load_conf_file(rpath)

            local service = common.select_service_obj()

            if not service then
                r.result = jsonc.stringify({ status = common.status.not_found })
                return r
            end

            service:initialize(nil, common.ai.format.title)

            -- debug.log("auto_set_filename.log", file_name)
            local is_search = common.search_chat_id(args.id)

            if not is_search then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            -- debug.log("auto_set.log", file_path)

            local chat = load_chat_data(file_path)
            chat.model = uci:get_first(common.db.uci.cfg, common.db.uci.sect.service, "model")

            -- debug.dump("auto_set_chat.log", chat)

            local _, title = transfer.chat_with_ai(service, chat)

            if (not title) or (#title == 0) then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            -- debug.log("hello.log", "hello!!")

            local is_set = save_chat_title(args.id, title)

            if not is_set then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            -- debug.log("test.log", title)

            r.result = jsonc.stringify({ status = common.status.ok, title = title })
            return r
        end
    },

    manual_set = {
        args = { id = "a_string", title = "a_string" },

        call = function(args)
            local r = {}
            local is_set = false

            if #args.title ~= 0 then
                is_set = save_chat_title(args.id, args.title)
            end

            if not is_set then
                r.result = jsonc.stringify({ status = common.status.error })
                return r
            end

            r.result = jsonc.stringify({ status = common.status.ok, title = args.title })
            return r
        end
    },
}

local function parseInput()

    local parse = jsonc.new()
    local done, err

    while true do
        local chunk = io.read(4096)
        if not chunk then
            break
        elseif not done and not err then
            done, err = parse:parse(chunk)
        end
    end

    if not done then
        print(jsonc.stringify({
            error = err or "Incomplete input for argument parsing"
        }))
        os.exit(1)
    end

    return parse:get()
end

-- validation
local function validateArgs(func, uargs)

    local method = methods[func]
    if not method then
        print(jsonc.stringify({error = "Method not found in methods table"}))
        os.exit(1)
    end

    local n = 0
    for _, _ in pairs(uargs) do n = n + 1 end

    if method.args and n == 0 then
        print(jsonc.stringify({
            error = "Received empty arguments for " .. func ..
                " but it requires " .. jsonc.stringify(method.args)
        }))
        os.exit(1)
    end

    uargs.ubus_rpc_session = nil

    local margs = method.args or {}
    for k, v in pairs(uargs) do
        if margs[k] == nil or (v ~= nil and type(v) ~= type(margs[k])) then
            print(jsonc.stringify({
                error = "Invalid argument '" .. k .. "' for " .. func ..
                    " it requires " .. jsonc.stringify(method.args)
            }))
            os.exit(1)
        end
    end

    return method
end

-- ubus list & call
if arg[1] == "list" then
    local _, rv = nil, {}
    for _, method in pairs(methods) do rv[_] = method.args or {} end
    print((jsonc.stringify(rv):gsub(":%[%]", ":{}")))
elseif arg[1] == "call" then
    local args = parseInput()
    local method = validateArgs(arg[2], args)
    local run = method.call(args)
    print(run.result)
    os.exit(run.code or 0)
end