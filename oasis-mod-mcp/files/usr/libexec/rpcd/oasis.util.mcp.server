#!/usr/bin/env lua

--[[
# Rules for defining tools in the MCP server
    - Rule 1. 
        If a tool requires arguments, you must specify a type string for each argument.

        Reference:
        1. string type  ---> "a_string"
        TODO: Investigate data type specifications other than "a_string" and add them here. 

    - Rule 2. 
        The table returned by mcp_server.response must be an associative array (key-value pairs).

        Example: 
        mcp_server.response({reply = "Hello MCP Client!"})
]]

local mcp_server = require("oasis.local.mcp_server")

mcp_server.add_tool("get_weather", {
    args = { location = "a_string" },
    call = function(args)
        -- Mock: Returns a fake temperature for the given location
        local res = mcp_server.response({ location = args.location, temperature = "25Â°C", condition = "Sunny" })
        return res
    end
})

mcp_server.add_tool("get_wlan_ifname_list", {
    call = function()
        -- Mock: Returns a fake temperature for the given location
        local res = mcp_server.response({ ifname1 = "wlan0", ifname2 = "wlan1" })
        return res
    end
})

mcp_server.add_tool("function_A", {
    args = { param1 = "a_string", param2 = "a_string" },
    call = function(args)
        -- Mock: Returns the received parameters as is
        local res = mcp_server.response({
            received_param1 = args.param1,
            received_param2 = args.param2
        })
        return res
    end
})

mcp_server.activate_tools(arg)